ERROR: LoadError: MethodError: no method matching iterate(::Nothing)
Closest candidates are:
  iterate(!Matched::Union{LinRange, StepRangeLen}) at range.jl:664
  iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Int64) at range.jl:664
  iterate(!Matched::T) where T<:Union{Base.KeySet{var"#s79", var"#s78"} where {var"#s79", var"#s78"<:Dict}, Base.ValueIterator{var"#s77"} where var"#s77"<:Dict} at dict.jl:693
  ...
Stacktrace:
  [1] indexed_iterate(I::Nothing, i::Int64)
    @ Base ./tuple.jl:89
  [2] MPS(A::ITensor{4}, sites::Vector{IndexSet{1, Index{Int64}, Tuple{Index{Int64}}}}; leftinds::Index{Int64}, orthocenter::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1388
  [3] setindex!(ψ::MPS, A::ITensor{4}, r::UnitRange{Int64}; orthocenter::Int64, perm::Vector{Int64}, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1328
  [4] setindex!(::MPS, ::ITensor{4}, ::UnitRange{Int64}, ::Pair{Symbol, Any}, ::Vararg{Pair{Symbol, Any}, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:orthocenter, :perm), Tuple{Int64, Vector{Int64}}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1340
  [5] swapbondsites(ψ::MPS, b::Int64; kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1419
  [6] movesite(ψ::MPS, n1n2::Pair{Int64, Int64}; orthocenter::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1447
  [7] _movesites(ψ::MPS, ns::Vector{Int64}, ns′::Vector{Int64}; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1474
  [8] movesites(ψ::MPS, nsns′::Vector{Pair{Int64, Int64}}; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1495
  [9] product(o::ITensor{4}, ψ::MPS, ns::Vector{Int64}; move_sites_back::Bool, apply_dag::Bool, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1548
 [10] product(As::Vector{ITensor}, ψ::MPS; move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1650
 [11] runcircuit(M::MPS, circuit_tensors::Vector{ITensor}; apply_dag::Nothing, cutoff::Float64, maxdim::Int64, svd_alg::String, move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ PastaQ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:86
 [12] #runcircuit#99
    @ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:188 [inlined]
 [13] SurfCirc(dz::Int64, dx::Int64, nr::Int64, PEZ::Matrix{Int64}, PEX::Matrix{Int64}, Synz::Matrix{Int64}, Synx::Matrix{Int64}, zsch::Vector{Any}, xsch::Vector{Any}, bsch::Array{Int64, 3}, layout::Vector{Any}, ql::Matrix{Int64}, zl::Vector{Int64}, xl::Vector{Int64}, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, pmz::Float64, pmx::Float64, acc::Float64, bd::Int64)
    @ Main /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/1e5/mlsurfnc.jl:1337
 [14] macro expansion
    @ /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/1e5/mlsurfnc.jl:1432 [inlined]
 [15] macro expansion
    @ ./timing.jl:287 [inlined]
 [16] SurfMC(dz::Int64, dx::Int64, nr::Int64, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, acc::Float64, bd::Int64, err::Float64, nt::Int64; sim_id::Int64)
    @ Main /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/1e5/mlsurfnc.jl:1431
 [17] top-level scope
    @ /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/1e5/mlsurfnc.jl:1514
in expression starting at /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/1e5/mlsurfnc.jl:1512
mu is
0.0
number of trials is
200
number of Z or Y failures is
0
number of X failures is
0
average trial time
2.290663221125001
mu is
0.0
number of trials is
400
number of Z or Y failures is
0
number of X failures is
0
average trial time
4.397191823795003
mu is
0.0
number of trials is
600
number of Z or Y failures is
0
number of X failures is
0
average trial time
6.498458265819998
mu is
0.0
number of trials is
800
number of Z or Y failures is
0
number of X failures is
0
average trial time
8.60353281665
mu is
0.0
number of trials is
1000
number of Z or Y failures is
0
number of X failures is
0
average trial time
10.704683881530007
mu is
0.0
number of trials is
1200
number of Z or Y failures is
0
number of X failures is
0
average trial time
12.81279450191999
mu is
0.0
number of trials is
1400
number of Z or Y failures is
0
number of X failures is
0
average trial time
14.934978989769986
mu is
0.0
number of trials is
1600
number of Z or Y failures is
0
number of X failures is
0
average trial time
17.043968688009997
mu is
0.0
number of trials is
1800
number of Z or Y failures is
0
number of X failures is
0
average trial time
19.169658279215
mu is
0.0
number of trials is
2000
number of Z or Y failures is
0
number of X failures is
0
average trial time
21.30438987967
mu is
0.0
number of trials is
2200
number of Z or Y failures is
0
number of X failures is
0
average trial time
23.472793045625007
mu is
0.0
number of trials is
2400
number of Z or Y failures is
0
number of X failures is
0
average trial time
25.65247222364003
mu is
0.0
number of trials is
2600
number of Z or Y failures is
0
number of X failures is
0
average trial time
27.883181311835056
mu is
0.0
number of trials is
2800
number of Z or Y failures is
0
number of X failures is
0
average trial time
30.10424108516005
mu is
0.0
number of trials is
3000
number of Z or Y failures is
0
number of X failures is
0
average trial time
32.35854463130004
mu is
0.0
number of trials is
3200
number of Z or Y failures is
0
number of X failures is
0
average trial time
34.62471200677005
mu is
0.0
number of trials is
3400
number of Z or Y failures is
0
number of X failures is
0
average trial time
36.917247223015075
mu is
0.0
number of trials is
3600
number of Z or Y failures is
0
number of X failures is
0
average trial time
39.246861132360074
mu is
0.0
number of trials is
3800
number of Z or Y failures is
0
number of X failures is
0
average trial time
41.59221615395511
mu is
0.0
number of trials is
4000
number of Z or Y failures is
0
number of X failures is
0
average trial time
43.92611613229013
mu is
0.0
number of trials is
4200
number of Z or Y failures is
0
number of X failures is
0
average trial time
46.25720757993018
mu is
0.0
number of trials is
4400
number of Z or Y failures is
0
number of X failures is
0
average trial time
48.636317058700236
mu is
0.0
number of trials is
4600
number of Z or Y failures is
0
number of X failures is
0
average trial time
51.092992339410245
mu is
0.0
number of trials is
4800
number of Z or Y failures is
0
number of X failures is
0
average trial time
53.48069591285525
mu is
0.0
number of trials is
5000
number of Z or Y failures is
0
number of X failures is
0
average trial time
55.894448907490194
mu is
0.0
number of trials is
5200
number of Z or Y failures is
0
number of X failures is
0
average trial time
58.36689687844014
mu is
0.0
number of trials is
5400
number of Z or Y failures is
0
number of X failures is
0
average trial time
60.805405445175154
mu is
0.0
number of trials is
5600
number of Z or Y failures is
0
number of X failures is
0
average trial time
63.28505164156516
mu is
0.0
number of trials is
5800
number of Z or Y failures is
0
number of X failures is
0
average trial time
65.77796561235021
mu is
0.0
number of trials is
6000
number of Z or Y failures is
0
number of X failures is
0
average trial time
68.23344229165023
mu is
0.0
number of trials is
6200
number of Z or Y failures is
0
number of X failures is
0
average trial time
70.69811446659028
mu is
0.0
number of trials is
6400
number of Z or Y failures is
0
number of X failures is
0
average trial time
73.16344643330524
mu is
0.0
number of trials is
6600
number of Z or Y failures is
0
number of X failures is
0
average trial time
75.61510240584026
mu is
0.0
number of trials is
6800
number of Z or Y failures is
0
number of X failures is
0
average trial time
78.12163679650526
mu is
0.0
number of trials is
7000
number of Z or Y failures is
0
number of X failures is
0
average trial time
80.60379647775027
mu is
0.0
number of trials is
7200
number of Z or Y failures is
0
number of X failures is
0
average trial time
83.08192149391029
mu is
0.0
number of trials is
7400
number of Z or Y failures is
0
number of X failures is
0
average trial time
85.58506257854035
mu is
0.0
number of trials is
7600
number of Z or Y failures is
0
number of X failures is
0
average trial time
88.08432893685038
mu is
0.0
number of trials is
7800
number of Z or Y failures is
0
number of X failures is
0
average trial time
90.56675701104533
mu is
0.0
number of trials is
8000
number of Z or Y failures is
0
number of X failures is
0
average trial time
93.02329888591026
mu is
0.0
number of trials is
8200
number of Z or Y failures is
0
number of X failures is
0
average trial time
95.53554882653026
mu is
0.0
number of trials is
8400
number of Z or Y failures is
0
number of X failures is
0
average trial time
98.0431428713853
mu is
0.0
number of trials is
8600
number of Z or Y failures is
0
number of X failures is
0
average trial time
100.52894487060044
mu is
0.0
number of trials is
8800
number of Z or Y failures is
0
number of X failures is
0
average trial time
103.01237238510038
mu is
0.0
number of trials is
9000
number of Z or Y failures is
0
number of X failures is
0
average trial time
105.5174937147903
mu is
0.0
number of trials is
9200
number of Z or Y failures is
0
number of X failures is
0
average trial time
108.00723678982519
mu is
0.0
number of trials is
9400
number of Z or Y failures is
0
number of X failures is
0
average trial time
110.5001657438602
mu is
0.0
number of trials is
9600
number of Z or Y failures is
0
number of X failures is
0
average trial time
112.97226140378524
mu is
0.0
number of trials is
9800
number of Z or Y failures is
0
number of X failures is
0
average trial time
115.45773961118047
mu is
0.0
number of trials is
10000
number of Z or Y failures is
0
number of X failures is
0
average trial time
117.95233608069557
mu is
0.0
number of trials is
10200
number of Z or Y failures is
0
number of X failures is
0
average trial time
120.49120144910061
mu is
0.0
number of trials is
10400
number of Z or Y failures is
0
number of X failures is
0
average trial time
122.97303098375569
mu is
0.0
number of trials is
10600
number of Z or Y failures is
0
number of X failures is
0
average trial time
125.44071961817062
mu is
0.0
number of trials is
10800
number of Z or Y failures is
0
number of X failures is
0
average trial time
127.9090688519906
mu is
0.0
number of trials is
11000
number of Z or Y failures is
0
number of X failures is
0
average trial time
130.38863567426063
mu is
0.0
number of trials is
11200
number of Z or Y failures is
0
number of X failures is
0
average trial time
132.87011143643045
mu is
0.0
number of trials is
11400
number of Z or Y failures is
0
number of X failures is
0
average trial time
135.3461654845054
mu is
0.0
number of trials is
11600
number of Z or Y failures is
0
number of X failures is
0
average trial time
137.82832884747552
mu is
0.0
number of trials is
11800
number of Z or Y failures is
0
number of X failures is
0
average trial time
140.2966107006156
mu is
0.0
number of trials is
12000
number of Z or Y failures is
0
number of X failures is
0
average trial time
142.77761319784057
mu is
0.0
number of trials is
12200
number of Z or Y failures is
0
number of X failures is
0
average trial time
145.25017490273046
mu is
0.0
number of trials is
12400
number of Z or Y failures is
0
number of X failures is
0
average trial time
147.73629986331062
mu is
0.0
number of trials is
12600
number of Z or Y failures is
0
number of X failures is
0
average trial time
150.18729405490058
mu is
0.0
number of trials is
12800
number of Z or Y failures is
0
number of X failures is
0
average trial time
152.63491982616077
mu is
0.0
number of trials is
13000
number of Z or Y failures is
0
number of X failures is
0
average trial time
155.0704219861258
mu is
0.0
number of trials is
13200
number of Z or Y failures is
0
number of X failures is
0
average trial time
157.54302466115078
mu is
0.0
number of trials is
13400
number of Z or Y failures is
0
number of X failures is
0
average trial time
160.00528358972565
mu is
0.0
number of trials is
13600
number of Z or Y failures is
0
number of X failures is
0
average trial time
162.41758597964557
mu is
0.0
number of trials is
13800
number of Z or Y failures is
0
number of X failures is
0
average trial time
164.82890884631558
mu is
0.0
number of trials is
14000
number of Z or Y failures is
0
number of X failures is
0
average trial time
167.2725745523503
mu is
0.0
number of trials is
14200
number of Z or Y failures is
0
number of X failures is
0
average trial time
169.70294528674052
mu is
0.0
number of trials is
14400
number of Z or Y failures is
0
number of X failures is
0
average trial time
172.12340211054558
mu is
0.0
number of trials is
14600
number of Z or Y failures is
0
number of X failures is
0
average trial time
174.55481525290566
The SVD algorithm `"divide_and_conquer"` has thrown an error,
likely because of a convergance failure. You can try
other SVD algorithms that may converge better using the
`alg` (or `svd_alg` if called through `factorize` or MPS/MPO functionality) keyword argument:

 - "divide_and_conquer" is a divide-and-conquer algorithm
   (LAPACK's `gesdd`). It is fast, but may lead to some innacurate
   singular values for very ill-conditioned matrices.
   It also may sometimes fail to converge, leading to errors
   (in which case `"qr_iteration"` or `"recursive"` can be tried).

 - `"qr_iteration"` (LAPACK's `gesvd`) is typically slower 
   than "divide_and_conquer", especially for large matrices,
   but is more accurate for very ill-conditioned matrices 
   compared to `"divide_and_conquer"`.

 - `"recursive"` is ITensor's custom SVD algorithm. It is very
   reliable, but may be slow if high precision is needed.
   To get an `svd` of a matrix `A`, an eigendecomposition of
   ``A^{\dagger} A`` is used to compute `U` and then a `qr` of
   ``A^{\dagger} U`` is used to compute `V`. This is performed
   recursively to compute small singular values.

Returning `nothing`. For an output `F = svd(A, ...)` you can check if
`isnothing(F)` in your code and try a different algorithm.

To suppress this message in the future, you can wrap the `svd` call in the
`@suppress` macro from the `Suppressor` package.

