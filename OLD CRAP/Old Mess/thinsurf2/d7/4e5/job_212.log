ERROR: LoadError: MethodError: no method matching iterate(::Nothing)
Closest candidates are:
  iterate(!Matched::Union{LinRange, StepRangeLen}) at range.jl:664
  iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Int64) at range.jl:664
  iterate(!Matched::T) where T<:Union{Base.KeySet{var"#s79", var"#s78"} where {var"#s79", var"#s78"<:Dict}, Base.ValueIterator{var"#s77"} where var"#s77"<:Dict} at dict.jl:693
  ...
Stacktrace:
  [1] indexed_iterate(I::Nothing, i::Int64)
    @ Base ./tuple.jl:89
  [2] MPS(A::ITensor{4}, sites::Vector{IndexSet{1, Index{Int64}, Tuple{Index{Int64}}}}; leftinds::Index{Int64}, orthocenter::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1388
  [3] setindex!(ψ::MPS, A::ITensor{4}, r::UnitRange{Int64}; orthocenter::Int64, perm::Vector{Int64}, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1328
  [4] setindex!(::MPS, ::ITensor{4}, ::UnitRange{Int64}, ::Pair{Symbol, Any}, ::Vararg{Pair{Symbol, Any}, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:orthocenter, :perm), Tuple{Int64, Vector{Int64}}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1340
  [5] swapbondsites(ψ::MPS, b::Int64; kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1419
  [6] movesite(ψ::MPS, n1n2::Pair{Int64, Int64}; orthocenter::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1447
  [7] _movesites(ψ::MPS, ns::Vector{Int64}, ns′::Vector{Int64}; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1474
  [8] movesites(ψ::MPS, nsns′::Vector{Pair{Int64, Int64}}; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1495
  [9] product(o::ITensor{4}, ψ::MPS, ns::Vector{Int64}; move_sites_back::Bool, apply_dag::Bool, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1548
 [10] product(As::Vector{ITensor}, ψ::MPS; move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1650
 [11] runcircuit(M::MPS, circuit_tensors::Vector{ITensor}; apply_dag::Nothing, cutoff::Float64, maxdim::Int64, svd_alg::String, move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ PastaQ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:86
 [12] #runcircuit#99
    @ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:188 [inlined]
 [13] SurfCirc(dz::Int64, dx::Int64, nr::Int64, PEZ::Matrix{Int64}, PEX::Matrix{Int64}, Synz::Matrix{Int64}, Synx::Matrix{Int64}, zsch::Vector{Any}, xsch::Vector{Any}, bsch::Array{Int64, 3}, layout::Vector{Any}, ql::Matrix{Int64}, zl::Vector{Int64}, xl::Vector{Int64}, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, pmz::Float64, pmx::Float64, acc::Float64, bd::Int64)
    @ Main /shared/MLSurface/JuliaCLTNDecoder/experiment/d7/2e5/supp/mlsurfnc.jl:1337
 [14] macro expansion
    @ /shared/MLSurface/JuliaCLTNDecoder/experiment/d7/2e5/supp/mlsurfnc.jl:1432 [inlined]
 [15] macro expansion
    @ ./timing.jl:287 [inlined]
 [16] SurfMC(dz::Int64, dx::Int64, nr::Int64, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, acc::Float64, bd::Int64, err::Float64, nt::Int64; sim_id::Int64)
    @ Main /shared/MLSurface/JuliaCLTNDecoder/experiment/d7/2e5/supp/mlsurfnc.jl:1431
 [17] top-level scope
    @ /shared/MLSurface/JuliaCLTNDecoder/experiment/d7/2e5/supp/mlsurfnc.jl:1514
in expression starting at /shared/MLSurface/JuliaCLTNDecoder/experiment/d7/2e5/supp/mlsurfnc.jl:1512
mu is
0.005
number of trials is
200
number of Z or Y failures is
1
number of X failures is
0
average trial time
1.793988470110001
mu is
0.0025
number of trials is
400
number of Z or Y failures is
1
number of X failures is
0
average trial time
3.408868790765002
mu is
0.0016666666666666668
number of trials is
600
number of Z or Y failures is
1
number of X failures is
0
average trial time
5.0016262226100014
mu is
0.0025
number of trials is
800
number of Z or Y failures is
2
number of X failures is
0
average trial time
6.646917430660002
mu is
0.003
number of trials is
1000
number of Z or Y failures is
3
number of X failures is
0
average trial time
8.326346582699989
mu is
0.0025
number of trials is
1200
number of Z or Y failures is
3
number of X failures is
0
average trial time
10.089023429474988
mu is
0.002142857142857143
number of trials is
1400
number of Z or Y failures is
3
number of X failures is
0
average trial time
11.899560301330006
mu is
0.001875
number of trials is
1600
number of Z or Y failures is
3
number of X failures is
0
average trial time
13.759276717415
mu is
0.002777777777777778
number of trials is
1800
number of Z or Y failures is
5
number of X failures is
0
average trial time
15.656754491154988
stderr is
0.0012408781628369455
target is
0.0002777777777777778
mu is
0.003
number of trials is
2000
number of Z or Y failures is
6
number of X failures is
0
average trial time
17.54218972094499
stderr is
0.0012232122154646882
target is
0.00030000000000000003
mu is
0.0036363636363636364
number of trials is
2200
number of Z or Y failures is
8
number of X failures is
0
average trial time
19.455958994584996
stderr is
0.0012836007816852402
target is
0.00036363636363636367
mu is
0.00375
number of trials is
2400
number of Z or Y failures is
9
number of X failures is
0
average trial time
21.381307886269997
stderr is
0.0012479140577873046
target is
0.000375
mu is
0.0034615384615384616
number of trials is
2600
number of Z or Y failures is
9
number of X failures is
0
average trial time
23.330944449115005
stderr is
0.0011520689542486153
target is
0.0003461538461538462
mu is
0.0032142857142857142
number of trials is
2800
number of Z or Y failures is
9
number of X failures is
0
average trial time
25.249158128344995
stderr is
0.001069896316699016
target is
0.00032142857142857147
mu is
0.003
number of trials is
3000
number of Z or Y failures is
9
number of X failures is
0
average trial time
27.21675002414496
stderr is
0.000998665331403894
target is
0.00030000000000000003
mu is
0.0028125
number of trials is
3200
number of Z or Y failures is
9
number of X failures is
0
average trial time
29.164612200094965
stderr is
0.0009363270248769114
target is
0.00028125
mu is
0.0026470588235294116
number of trials is
3400
number of Z or Y failures is
9
number of X failures is
0
average trial time
31.123491031579988
stderr is
0.0008813139617861748
target is
0.00026470588235294115
mu is
0.0025
number of trials is
3600
number of Z or Y failures is
9
number of X failures is
0
average trial time
33.071401232499994
stderr is
0.0008324066348722741
target is
0.00025
mu is
0.0028947368421052633
number of trials is
3800
number of Z or Y failures is
11
number of X failures is
0
average trial time
34.97321812676499
stderr is
0.0008716465224505199
target is
0.00028947368421052634
mu is
0.00275
number of trials is
4000
number of Z or Y failures is
11
number of X failures is
0
average trial time
36.89504458151003
stderr is
0.0008281188442518689
target is
0.000275
mu is
0.002619047619047619
number of trials is
4200
number of Z or Y failures is
11
number of X failures is
0
average trial time
38.76540608278005
stderr is
0.0007887316983475914
target is
0.0002619047619047619
mu is
0.0025
number of trials is
4400
number of Z or Y failures is
11
number of X failures is
0
average trial time
40.66174342153006
stderr is
0.0007529211129452466
target is
0.00025
mu is
0.002391304347826087
number of trials is
4600
number of Z or Y failures is
11
number of X failures is
0
average trial time
42.537964661940016
stderr is
0.0007202210907168757
target is
0.0002391304347826087
mu is
0.0025
number of trials is
4800
number of Z or Y failures is
12
number of X failures is
0
average trial time
44.414410131679986
stderr is
0.0007208602556882168
target is
0.00025
mu is
0.0024
number of trials is
5000
number of Z or Y failures is
12
number of X failures is
0
average trial time
46.322130989019996
stderr is
0.0006920576484352669
target is
0.00023999999999999998
mu is
0.002307692307692308
number of trials is
5200
number of Z or Y failures is
12
number of X failures is
0
average trial time
48.17997500355
stderr is
0.0006654682723649521
target is
0.0002307692307692308
mu is
0.0024074074074074076
number of trials is
5400
number of Z or Y failures is
13
number of X failures is
0
average trial time
50.07195812906
stderr is
0.0006669522474830577
target is
0.00024074074074074077
mu is
0.0025
number of trials is
5600
number of Z or Y failures is
14
number of X failures is
0
average trial time
52.00441187281005
stderr is
0.0006673769806427532
target is
0.00025
mu is
0.002586206896551724
number of trials is
5800
number of Z or Y failures is
15
number of X failures is
0
average trial time
53.89354850687002
stderr is
0.0006669492111783486
target is
0.0002586206896551724
mu is
0.0028333333333333335
number of trials is
6000
number of Z or Y failures is
17
number of X failures is
0
average trial time
55.721993991714896
stderr is
0.0006862672606582908
target is
0.00028333333333333335
mu is
0.002903225806451613
number of trials is
6200
number of Z or Y failures is
18
number of X failures is
0
average trial time
57.5287660705049
stderr is
0.0006833579405481478
target is
0.0002903225806451613
mu is
0.0028125
number of trials is
6400
number of Z or Y failures is
18
number of X failures is
0
average trial time
59.36804124690988
stderr is
0.0006620314533449319
target is
0.00028125
mu is
0.0030303030303030303
number of trials is
6600
number of Z or Y failures is
20
number of X failures is
0
average trial time
61.2137049282099
stderr is
0.0006766201777633023
target is
0.00030303030303030303
mu is
0.0029411764705882353
number of trials is
6800
number of Z or Y failures is
20
number of X failures is
0
average trial time
63.03764494073987
stderr is
0.000656747474614203
target is
0.00029411764705882356
mu is
0.002857142857142857
number of trials is
7000
number of Z or Y failures is
20
number of X failures is
0
average trial time
64.87478291239485
stderr is
0.0006380088050301535
target is
0.00028571428571428574
mu is
0.002916666666666667
number of trials is
7200
number of Z or Y failures is
21
number of X failures is
0
average trial time
66.71012859528484
stderr is
0.0006355841243167695
target is
0.0002916666666666667
mu is
0.002972972972972973
number of trials is
7400
number of Z or Y failures is
22
number of X failures is
0
average trial time
68.55671628505989
stderr is
0.0006329398393249946
target is
0.0002972972972972973
mu is
0.0030263157894736843
number of trials is
7600
number of Z or Y failures is
23
number of X failures is
0
average trial time
70.39351653597483
stderr is
0.0006301163477389414
target is
0.00030263157894736844
mu is
0.002948717948717949
number of trials is
7800
number of Z or Y failures is
23
number of X failures is
0
average trial time
72.25371588290979
stderr is
0.0006139823752517173
target is
0.0002948717948717949
mu is
0.002875
number of trials is
8000
number of Z or Y failures is
23
number of X failures is
0
average trial time
74.05294648268479
stderr is
0.0005986539862052201
target is
0.0002875
mu is
0.002926829268292683
number of trials is
8200
number of Z or Y failures is
24
number of X failures is
0
average trial time
75.88544261656484
stderr is
0.0005965979636459419
target is
0.0002926829268292683
mu is
0.002976190476190476
number of trials is
8400
number of Z or Y failures is
25
number of X failures is
0
average trial time
77.6944171651749
stderr is
0.0005943870454590093
target is
0.00029761904761904765
mu is
0.0030232558139534882
number of trials is
8600
number of Z or Y failures is
26
number of X failures is
0
average trial time
79.5248230132449
stderr is
0.0005920467314963269
target is
0.00030232558139534885
mu is
0.0029545454545454545
number of trials is
8800
number of Z or Y failures is
26
number of X failures is
0
average trial time
81.32904543914486
stderr is
0.0005786102968612609
target is
0.00029545454545454547
mu is
0.003
number of trials is
9000
number of Z or Y failures is
27
number of X failures is
0
average trial time
83.13395661417486
stderr is
0.000576515622826126
target is
0.00030000000000000003
mu is
0.003043478260869565
number of trials is
9200
number of Z or Y failures is
28
number of X failures is
0
average trial time
84.88751305607484
stderr is
0.0005743186268007043
target is
0.00030434782608695655
The SVD algorithm `"divide_and_conquer"` has thrown an error,
likely because of a convergance failure. You can try
other SVD algorithms that may converge better using the
`alg` (or `svd_alg` if called through `factorize` or MPS/MPO functionality) keyword argument:

 - "divide_and_conquer" is a divide-and-conquer algorithm
   (LAPACK's `gesdd`). It is fast, but may lead to some innacurate
   singular values for very ill-conditioned matrices.
   It also may sometimes fail to converge, leading to errors
   (in which case `"qr_iteration"` or `"recursive"` can be tried).

 - `"qr_iteration"` (LAPACK's `gesvd`) is typically slower 
   than "divide_and_conquer", especially for large matrices,
   but is more accurate for very ill-conditioned matrices 
   compared to `"divide_and_conquer"`.

 - `"recursive"` is ITensor's custom SVD algorithm. It is very
   reliable, but may be slow if high precision is needed.
   To get an `svd` of a matrix `A`, an eigendecomposition of
   ``A^{\dagger} A`` is used to compute `U` and then a `qr` of
   ``A^{\dagger} U`` is used to compute `V`. This is performed
   recursively to compute small singular values.

Returning `nothing`. For an output `F = svd(A, ...)` you can check if
`isnothing(F)` in your code and try a different algorithm.

To suppress this message in the future, you can wrap the `svd` call in the
`@suppress` macro from the `Suppressor` package.

