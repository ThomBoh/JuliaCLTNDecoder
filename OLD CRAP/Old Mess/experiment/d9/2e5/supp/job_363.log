ERROR: LoadError: MethodError: no method matching iterate(::Nothing)
Closest candidates are:
  iterate(!Matched::Union{LinRange, StepRangeLen}) at range.jl:664
  iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Int64) at range.jl:664
  iterate(!Matched::T) where T<:Union{Base.KeySet{var"#s79", var"#s78"} where {var"#s79", var"#s78"<:Dict}, Base.ValueIterator{var"#s77"} where var"#s77"<:Dict} at dict.jl:693
  ...
Stacktrace:
  [1] indexed_iterate(I::Nothing, i::Int64)
    @ Base ./tuple.jl:89
  [2] MPS(A::ITensor{4}, sites::Vector{IndexSet{1, Index{Int64}, Tuple{Index{Int64}}}}; leftinds::Index{Int64}, orthocenter::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1388
  [3] setindex!(ψ::MPS, A::ITensor{4}, r::UnitRange{Int64}; orthocenter::Int64, perm::Vector{Int64}, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1328
  [4] setindex!(::MPS, ::ITensor{4}, ::UnitRange{Int64}, ::Pair{Symbol, Any}, ::Vararg{Pair{Symbol, Any}, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:orthocenter, :perm), Tuple{Int64, Vector{Int64}}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1340
  [5] swapbondsites(ψ::MPS, b::Int64; kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1419
  [6] movesite(ψ::MPS, n1n2::Pair{Int64, Int64}; orthocenter::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1447
  [7] _movesites(ψ::MPS, ns::Vector{Int64}, ns′::Vector{Int64}; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1474
  [8] movesites(ψ::MPS, nsns′::Vector{Pair{Int64, Int64}}; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1495
  [9] product(As::Vector{ITensor}, ψ::MPS; move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1656
 [10] runcircuit(M::MPS, circuit_tensors::Vector{ITensor}; apply_dag::Nothing, cutoff::Float64, maxdim::Int64, svd_alg::String, move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ PastaQ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:86
 [11] #runcircuit#99
    @ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:188 [inlined]
 [12] SurfCirc(dz::Int64, dx::Int64, nr::Int64, PEZ::Matrix{Int64}, PEX::Matrix{Int64}, Synz::Matrix{Int64}, Synx::Matrix{Int64}, zsch::Vector{Any}, xsch::Vector{Any}, bsch::Array{Int64, 3}, layout::Vector{Any}, ql::Matrix{Int64}, zl::Vector{Int64}, xl::Vector{Int64}, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, pmz::Float64, pmx::Float64, acc::Float64, bd::Int64)
    @ Main /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/2e5/supp/mlsurfnc.jl:1337
 [13] macro expansion
    @ /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/2e5/supp/mlsurfnc.jl:1432 [inlined]
 [14] macro expansion
    @ ./timing.jl:287 [inlined]
 [15] SurfMC(dz::Int64, dx::Int64, nr::Int64, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, acc::Float64, bd::Int64, err::Float64, nt::Int64; sim_id::Int64)
    @ Main /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/2e5/supp/mlsurfnc.jl:1431
 [16] top-level scope
    @ /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/2e5/supp/mlsurfnc.jl:1514
in expression starting at /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/2e5/supp/mlsurfnc.jl:1512
mu is
0.0
number of trials is
200
number of Z or Y failures is
0
number of X failures is
0
average trial time
2.4756529356549994
mu is
0.0
number of trials is
400
number of Z or Y failures is
0
number of X failures is
0
average trial time
4.7711772823999965
mu is
0.0
number of trials is
600
number of Z or Y failures is
0
number of X failures is
0
average trial time
7.083063834909991
mu is
0.0
number of trials is
800
number of Z or Y failures is
0
number of X failures is
0
average trial time
9.404857935589993
mu is
0.0
number of trials is
1000
number of Z or Y failures is
0
number of X failures is
0
average trial time
11.781339427064989
mu is
0.0
number of trials is
1200
number of Z or Y failures is
0
number of X failures is
0
average trial time
14.237939064409984
mu is
0.0
number of trials is
1400
number of Z or Y failures is
0
number of X failures is
0
average trial time
16.691653126539975
mu is
0.0
number of trials is
1600
number of Z or Y failures is
0
number of X failures is
0
average trial time
19.22296571134998
mu is
0.0
number of trials is
1800
number of Z or Y failures is
0
number of X failures is
0
average trial time
21.835409118709954
mu is
0.0
number of trials is
2000
number of Z or Y failures is
0
number of X failures is
0
average trial time
24.442829177194945
mu is
0.0
number of trials is
2200
number of Z or Y failures is
0
number of X failures is
0
average trial time
27.11656768748492
mu is
0.0004166666666666667
number of trials is
2400
number of Z or Y failures is
1
number of X failures is
0
average trial time
29.866961974914908
mu is
0.0003846153846153846
number of trials is
2600
number of Z or Y failures is
1
number of X failures is
0
average trial time
32.602212002024906
mu is
0.00035714285714285714
number of trials is
2800
number of Z or Y failures is
1
number of X failures is
0
average trial time
35.38459979959491
mu is
0.0003333333333333333
number of trials is
3000
number of Z or Y failures is
1
number of X failures is
0
average trial time
38.20299585729488
mu is
0.0003125
number of trials is
3200
number of Z or Y failures is
1
number of X failures is
0
average trial time
40.9832297374699
mu is
0.0002941176470588235
number of trials is
3400
number of Z or Y failures is
1
number of X failures is
0
average trial time
43.784783302799944
mu is
0.0002777777777777778
number of trials is
3600
number of Z or Y failures is
1
number of X failures is
0
average trial time
46.58771692068502
mu is
0.0002631578947368421
number of trials is
3800
number of Z or Y failures is
1
number of X failures is
0
average trial time
49.34930419517006
mu is
0.00025
number of trials is
4000
number of Z or Y failures is
1
number of X failures is
0
average trial time
52.166013208615055
mu is
0.0002380952380952381
number of trials is
4200
number of Z or Y failures is
1
number of X failures is
0
average trial time
54.94482184610004
mu is
0.00022727272727272727
number of trials is
4400
number of Z or Y failures is
1
number of X failures is
0
average trial time
57.70531817806502
mu is
0.0002173913043478261
number of trials is
4600
number of Z or Y failures is
1
number of X failures is
0
average trial time
60.45395290414003
mu is
0.00020833333333333335
number of trials is
4800
number of Z or Y failures is
1
number of X failures is
0
average trial time
63.21804985784505
mu is
0.0002
number of trials is
5000
number of Z or Y failures is
1
number of X failures is
0
average trial time
66.003221739195
mu is
0.0001923076923076923
number of trials is
5200
number of Z or Y failures is
1
number of X failures is
0
average trial time
68.71238359179502
mu is
0.00018518518518518518
number of trials is
5400
number of Z or Y failures is
1
number of X failures is
0
average trial time
71.44404824134989
mu is
0.00017857142857142857
number of trials is
5600
number of Z or Y failures is
1
number of X failures is
0
average trial time
74.20419977010988
mu is
0.00017241379310344826
number of trials is
5800
number of Z or Y failures is
1
number of X failures is
0
average trial time
76.96953993181481
mu is
0.00016666666666666666
number of trials is
6000
number of Z or Y failures is
1
number of X failures is
0
average trial time
79.6489461208548
mu is
0.00016129032258064516
number of trials is
6200
number of Z or Y failures is
1
number of X failures is
0
average trial time
82.35055530926482
mu is
0.00015625
number of trials is
6400
number of Z or Y failures is
1
number of X failures is
0
average trial time
85.044417158365
mu is
0.00015151515151515152
number of trials is
6600
number of Z or Y failures is
1
number of X failures is
0
average trial time
87.74518269770995
mu is
0.00014705882352941175
number of trials is
6800
number of Z or Y failures is
1
number of X failures is
0
average trial time
90.42921500174002
mu is
0.00014285714285714287
number of trials is
7000
number of Z or Y failures is
1
number of X failures is
0
average trial time
93.11539737745505
mu is
0.0001388888888888889
number of trials is
7200
number of Z or Y failures is
1
number of X failures is
0
average trial time
95.80563211782005
mu is
0.00013513513513513514
number of trials is
7400
number of Z or Y failures is
1
number of X failures is
0
average trial time
98.46438078819
mu is
0.00013157894736842105
number of trials is
7600
number of Z or Y failures is
1
number of X failures is
0
average trial time
101.17326695628994
mu is
0.0001282051282051282
number of trials is
7800
number of Z or Y failures is
1
number of X failures is
0
average trial time
103.79211499509496
mu is
0.000125
number of trials is
8000
number of Z or Y failures is
1
number of X failures is
0
average trial time
106.49369902011507
mu is
0.00024390243902439024
number of trials is
8200
number of Z or Y failures is
2
number of X failures is
0
average trial time
109.1188879685101
mu is
0.0002380952380952381
number of trials is
8400
number of Z or Y failures is
2
number of X failures is
0
average trial time
111.79102343161514
mu is
0.00023255813953488373
number of trials is
8600
number of Z or Y failures is
2
number of X failures is
0
average trial time
114.47899841858522
mu is
0.00034090909090909094
number of trials is
8800
number of Z or Y failures is
3
number of X failures is
0
average trial time
117.16292704759522
mu is
0.0003333333333333333
number of trials is
9000
number of Z or Y failures is
3
number of X failures is
0
average trial time
119.8294060363351
mu is
0.00032608695652173916
number of trials is
9200
number of Z or Y failures is
3
number of X failures is
0
average trial time
122.48884184870523
mu is
0.00031914893617021275
number of trials is
9400
number of Z or Y failures is
3
number of X failures is
0
average trial time
125.14168517150014
mu is
0.0003125
number of trials is
9600
number of Z or Y failures is
3
number of X failures is
0
average trial time
127.7861431992701
mu is
0.0003061224489795918
number of trials is
9800
number of Z or Y failures is
3
number of X failures is
0
average trial time
130.4157942803352
mu is
0.0003
number of trials is
10000
number of Z or Y failures is
3
number of X failures is
0
average trial time
133.07829609118514
mu is
0.0002941176470588235
number of trials is
10200
number of Z or Y failures is
3
number of X failures is
0
average trial time
135.70925364091002
mu is
0.0002884615384615385
number of trials is
10400
number of Z or Y failures is
3
number of X failures is
0
average trial time
138.3858475856502
mu is
0.0002830188679245283
number of trials is
10600
number of Z or Y failures is
3
number of X failures is
0
average trial time
141.03066489292527
mu is
0.0002777777777777778
number of trials is
10800
number of Z or Y failures is
3
number of X failures is
0
average trial time
143.6841751345103
mu is
0.00027272727272727274
number of trials is
11000
number of Z or Y failures is
3
number of X failures is
0
average trial time
146.32461852656036
mu is
0.00026785714285714287
number of trials is
11200
number of Z or Y failures is
3
number of X failures is
0
average trial time
148.93845264840039
mu is
0.0002631578947368421
number of trials is
11400
number of Z or Y failures is
3
number of X failures is
0
average trial time
151.5645037820904
mu is
0.0002586206896551724
number of trials is
11600
number of Z or Y failures is
3
number of X failures is
0
average trial time
154.1683645383054
mu is
0.0002542372881355932
number of trials is
11800
number of Z or Y failures is
3
number of X failures is
0
average trial time
156.77303817423046
mu is
0.00025
number of trials is
12000
number of Z or Y failures is
3
number of X failures is
0
average trial time
159.43765526784534
mu is
0.0002459016393442623
number of trials is
12200
number of Z or Y failures is
3
number of X failures is
0
average trial time
162.04332573136534
mu is
0.00024193548387096774
number of trials is
12400
number of Z or Y failures is
3
number of X failures is
0
average trial time
164.61394058228524
mu is
0.0002380952380952381
number of trials is
12600
number of Z or Y failures is
3
number of X failures is
0
average trial time
167.22814299869515
mu is
0.000234375
number of trials is
12800
number of Z or Y failures is
3
number of X failures is
0
average trial time
169.87580345573514
The SVD algorithm `"divide_and_conquer"` has thrown an error,
likely because of a convergance failure. You can try
other SVD algorithms that may converge better using the
`alg` (or `svd_alg` if called through `factorize` or MPS/MPO functionality) keyword argument:

 - "divide_and_conquer" is a divide-and-conquer algorithm
   (LAPACK's `gesdd`). It is fast, but may lead to some innacurate
   singular values for very ill-conditioned matrices.
   It also may sometimes fail to converge, leading to errors
   (in which case `"qr_iteration"` or `"recursive"` can be tried).

 - `"qr_iteration"` (LAPACK's `gesvd`) is typically slower 
   than "divide_and_conquer", especially for large matrices,
   but is more accurate for very ill-conditioned matrices 
   compared to `"divide_and_conquer"`.

 - `"recursive"` is ITensor's custom SVD algorithm. It is very
   reliable, but may be slow if high precision is needed.
   To get an `svd` of a matrix `A`, an eigendecomposition of
   ``A^{\dagger} A`` is used to compute `U` and then a `qr` of
   ``A^{\dagger} U`` is used to compute `V`. This is performed
   recursively to compute small singular values.

Returning `nothing`. For an output `F = svd(A, ...)` you can check if
`isnothing(F)` in your code and try a different algorithm.

To suppress this message in the future, you can wrap the `svd` call in the
`@suppress` macro from the `Suppressor` package.

