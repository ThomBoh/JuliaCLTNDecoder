ERROR: LoadError: MethodError: no method matching iterate(::Nothing)
Closest candidates are:
  iterate(!Matched::Union{LinRange, StepRangeLen}) at range.jl:664
  iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Int64) at range.jl:664
  iterate(!Matched::T) where T<:Union{Base.KeySet{var"#s79", var"#s78"} where {var"#s79", var"#s78"<:Dict}, Base.ValueIterator{var"#s77"} where var"#s77"<:Dict} at dict.jl:693
  ...
Stacktrace:
  [1] indexed_iterate(I::Nothing, i::Int64)
    @ Base ./tuple.jl:89
  [2] MPS(A::ITensor{4}, sites::Vector{IndexSet{1, Index{Int64}, Tuple{Index{Int64}}}}; leftinds::Index{Int64}, orthocenter::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1388
  [3] setindex!(ψ::MPS, A::ITensor{4}, r::UnitRange{Int64}; orthocenter::Int64, perm::Vector{Int64}, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1328
  [4] setindex!(::MPS, ::ITensor{4}, ::UnitRange{Int64}, ::Pair{Symbol, Any}, ::Vararg{Pair{Symbol, Any}, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:orthocenter, :perm), Tuple{Int64, Vector{Int64}}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1340
  [5] swapbondsites(ψ::MPS, b::Int64; kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1419
  [6] movesite(ψ::MPS, n1n2::Pair{Int64, Int64}; orthocenter::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1447
  [7] _movesites(ψ::MPS, ns::Vector{Int64}, ns′::Vector{Int64}; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1474
  [8] movesites(ψ::MPS, nsns′::Vector{Pair{Int64, Int64}}; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1495
  [9] product(o::ITensor{4}, ψ::MPS, ns::Vector{Int64}; move_sites_back::Bool, apply_dag::Bool, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1548
 [10] product(As::Vector{ITensor}, ψ::MPS; move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1650
 [11] runcircuit(M::MPS, circuit_tensors::Vector{ITensor}; apply_dag::Nothing, cutoff::Float64, maxdim::Int64, svd_alg::String, move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ PastaQ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:86
 [12] #runcircuit#99
    @ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:188 [inlined]
 [13] SurfCirc(dz::Int64, dx::Int64, nr::Int64, PEZ::Matrix{Int64}, PEX::Matrix{Int64}, Synz::Matrix{Int64}, Synx::Matrix{Int64}, zsch::Vector{Any}, xsch::Vector{Any}, bsch::Array{Int64, 3}, layout::Vector{Any}, ql::Matrix{Int64}, zl::Vector{Int64}, xl::Vector{Int64}, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, pmz::Float64, pmx::Float64, acc::Float64, bd::Int64)
    @ Main /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/4e5/supp/more/mlsurfnc.jl:1337
 [14] macro expansion
    @ /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/4e5/supp/more/mlsurfnc.jl:1432 [inlined]
 [15] macro expansion
    @ ./timing.jl:287 [inlined]
 [16] SurfMC(dz::Int64, dx::Int64, nr::Int64, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, acc::Float64, bd::Int64, err::Float64, nt::Int64; sim_id::Int64)
    @ Main /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/4e5/supp/more/mlsurfnc.jl:1431
 [17] top-level scope
    @ /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/4e5/supp/more/mlsurfnc.jl:1514
in expression starting at /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/4e5/supp/more/mlsurfnc.jl:1512
mu is
0.0
number of trials is
200
number of Z or Y failures is
0
number of X failures is
0
average trial time
2.866402125584999
mu is
0.0
number of trials is
400
number of Z or Y failures is
0
number of X failures is
0
average trial time
5.5926564580500004
mu is
0.0016666666666666668
number of trials is
600
number of Z or Y failures is
1
number of X failures is
0
average trial time
8.448495180890005
mu is
0.00125
number of trials is
800
number of Z or Y failures is
1
number of X failures is
0
average trial time
11.48519061198999
mu is
0.001
number of trials is
1000
number of Z or Y failures is
1
number of X failures is
0
average trial time
14.616023769524991
mu is
0.0008333333333333334
number of trials is
1200
number of Z or Y failures is
1
number of X failures is
0
average trial time
17.840961201489993
mu is
0.0007142857142857143
number of trials is
1400
number of Z or Y failures is
1
number of X failures is
0
average trial time
21.14536616685999
mu is
0.000625
number of trials is
1600
number of Z or Y failures is
1
number of X failures is
0
average trial time
24.467472989124968
mu is
0.0005555555555555556
number of trials is
1800
number of Z or Y failures is
1
number of X failures is
0
average trial time
27.782059032534956
mu is
0.0005
number of trials is
2000
number of Z or Y failures is
1
number of X failures is
0
average trial time
31.03007159244494
mu is
0.00045454545454545455
number of trials is
2200
number of Z or Y failures is
1
number of X failures is
0
average trial time
34.314219615464964
mu is
0.0004166666666666667
number of trials is
2400
number of Z or Y failures is
1
number of X failures is
0
average trial time
37.65760235770994
mu is
0.0003846153846153846
number of trials is
2600
number of Z or Y failures is
1
number of X failures is
0
average trial time
40.867594138299985
mu is
0.00035714285714285714
number of trials is
2800
number of Z or Y failures is
1
number of X failures is
0
average trial time
44.06770971129
mu is
0.0006666666666666666
number of trials is
3000
number of Z or Y failures is
2
number of X failures is
0
average trial time
47.25971096899997
mu is
0.000625
number of trials is
3200
number of Z or Y failures is
2
number of X failures is
0
average trial time
50.45840485764
mu is
0.0008823529411764706
number of trials is
3400
number of Z or Y failures is
3
number of X failures is
0
average trial time
53.58953701565002
mu is
0.001388888888888889
number of trials is
3600
number of Z or Y failures is
5
number of X failures is
0
average trial time
56.78531270509001
stderr is
0.0006207847296911626
target is
0.0001388888888888889
mu is
0.0013157894736842105
number of trials is
3800
number of Z or Y failures is
5
number of X failures is
0
average trial time
59.85370375956501
stderr is
0.0005881290736314881
target is
0.00013157894736842105
mu is
0.00125
number of trials is
4000
number of Z or Y failures is
5
number of X failures is
0
average trial time
62.96356280741494
stderr is
0.0005587373460360994
target is
0.000125
mu is
0.0011904761904761906
number of trials is
4200
number of Z or Y failures is
5
number of X failures is
0
average trial time
66.01628039352491
stderr is
0.0005321434942566355
target is
0.00011904761904761906
mu is
0.0011363636363636363
number of trials is
4400
number of Z or Y failures is
5
number of X failures is
0
average trial time
69.13990384441489
stderr is
0.0005079661637964474
target is
0.00011363636363636364
mu is
0.0010869565217391304
number of trials is
4600
number of Z or Y failures is
5
number of X failures is
0
average trial time
72.2798675927399
stderr is
0.0004858902937183206
target is
0.00010869565217391305
mu is
0.0010416666666666667
number of trials is
4800
number of Z or Y failures is
5
number of X failures is
0
average trial time
75.40133378839987
stderr is
0.0004656533112709585
target is
0.00010416666666666667
mu is
0.001
number of trials is
5000
number of Z or Y failures is
5
number of X failures is
0
average trial time
78.56432454052492
stderr is
0.0004470346384717841
target is
0.0001
mu is
0.0009615384615384616
number of trials is
5200
number of Z or Y failures is
5
number of X failures is
0
average trial time
81.60695066289989
stderr is
0.0004298476193108059
target is
9.615384615384617e-5
mu is
0.000925925925925926
number of trials is
5400
number of Z or Y failures is
5
number of X failures is
0
average trial time
84.70697444900496
stderr is
0.00041393324024108235
target is
9.25925925925926e-5
mu is
0.0008928571428571428
number of trials is
5600
number of Z or Y failures is
5
number of X failures is
0
average trial time
87.81620588955998
stderr is
0.0003991551957952486
target is
8.928571428571429e-5
mu is
0.0008620689655172414
number of trials is
5800
number of Z or Y failures is
5
number of X failures is
0
average trial time
90.87940652453997
stderr is
0.00038539597475513925
target is
8.620689655172414e-5
mu is
0.0011666666666666668
number of trials is
6000
number of Z or Y failures is
7
number of X failures is
0
average trial time
93.92962038250509
stderr is
0.0004407379806497172
target is
0.00011666666666666668
mu is
0.0011290322580645162
number of trials is
6200
number of Z or Y failures is
7
number of X failures is
0
average trial time
97.03493895871004
stderr is
0.00042652751489087766
target is
0.00011290322580645163
mu is
0.00109375
number of trials is
6400
number of Z or Y failures is
7
number of X failures is
0
average trial time
100.07026702695003
stderr is
0.00041320478600444694
target is
0.00010937500000000002
mu is
0.0010606060606060607
number of trials is
6600
number of Z or Y failures is
7
number of X failures is
0
average trial time
103.01257568089996
stderr is
0.0004006891274336021
target is
0.00010606060606060608
mu is
0.0010294117647058824
number of trials is
6800
number of Z or Y failures is
7
number of X failures is
0
average trial time
106.03139993347988
stderr is
0.00038890935860160035
target is
0.00010294117647058825
mu is
0.001142857142857143
number of trials is
7000
number of Z or Y failures is
8
number of X failures is
0
average trial time
109.100164883415
stderr is
0.00040385890789900743
target is
0.0001142857142857143
mu is
0.001388888888888889
number of trials is
7200
number of Z or Y failures is
10
number of X failures is
0
average trial time
112.26681567095504
stderr is
0.0004389306033192965
target is
0.0001388888888888889
mu is
0.0014864864864864865
number of trials is
7400
number of Z or Y failures is
11
number of X failures is
0
average trial time
115.27408960751
stderr is
0.0004478895631063048
target is
0.00014864864864864866
mu is
0.0014473684210526317
number of trials is
7600
number of Z or Y failures is
11
number of X failures is
0
average trial time
118.3162978211649
stderr is
0.00043611076247347934
target is
0.00014473684210526317
mu is
0.0014102564102564104
number of trials is
7800
number of Z or Y failures is
11
number of X failures is
0
average trial time
121.34861135440978
stderr is
0.00042493561463885775
target is
0.00014102564102564104
mu is
0.0015
number of trials is
8000
number of Z or Y failures is
12
number of X failures is
0
average trial time
124.31364109946485
stderr is
0.00043271486601387834
target is
0.00015000000000000001
mu is
0.0014634146341463415
number of trials is
8200
number of Z or Y failures is
12
number of X failures is
0
average trial time
127.39057480991993
stderr is
0.0004221679352476636
target is
0.00014634146341463414
The SVD algorithm `"divide_and_conquer"` has thrown an error,
likely because of a convergance failure. You can try
other SVD algorithms that may converge better using the
`alg` (or `svd_alg` if called through `factorize` or MPS/MPO functionality) keyword argument:

 - "divide_and_conquer" is a divide-and-conquer algorithm
   (LAPACK's `gesdd`). It is fast, but may lead to some innacurate
   singular values for very ill-conditioned matrices.
   It also may sometimes fail to converge, leading to errors
   (in which case `"qr_iteration"` or `"recursive"` can be tried).

 - `"qr_iteration"` (LAPACK's `gesvd`) is typically slower 
   than "divide_and_conquer", especially for large matrices,
   but is more accurate for very ill-conditioned matrices 
   compared to `"divide_and_conquer"`.

 - `"recursive"` is ITensor's custom SVD algorithm. It is very
   reliable, but may be slow if high precision is needed.
   To get an `svd` of a matrix `A`, an eigendecomposition of
   ``A^{\dagger} A`` is used to compute `U` and then a `qr` of
   ``A^{\dagger} U`` is used to compute `V`. This is performed
   recursively to compute small singular values.

Returning `nothing`. For an output `F = svd(A, ...)` you can check if
`isnothing(F)` in your code and try a different algorithm.

To suppress this message in the future, you can wrap the `svd` call in the
`@suppress` macro from the `Suppressor` package.

