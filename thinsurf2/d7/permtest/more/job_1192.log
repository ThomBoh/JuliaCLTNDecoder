ERROR: LoadError: MethodError: no method matching iterate(::Nothing)
Closest candidates are:
  iterate(!Matched::Union{LinRange, StepRangeLen}) at range.jl:664
  iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Int64) at range.jl:664
  iterate(!Matched::T) where T<:Union{Base.KeySet{var"#s79", var"#s78"} where {var"#s79", var"#s78"<:Dict}, Base.ValueIterator{var"#s77"} where var"#s77"<:Dict} at dict.jl:693
  ...
Stacktrace:
  [1] indexed_iterate(I::Nothing, i::Int64)
    @ Base ./tuple.jl:89
  [2] MPS(A::ITensor{4}, sites::Vector{IndexSet{1, Index{Int64}, Tuple{Index{Int64}}}}; leftinds::Index{Int64}, orthocenter::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1388
  [3] setindex!(ψ::MPS, A::ITensor{4}, r::UnitRange{Int64}; orthocenter::Int64, perm::Nothing, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1328
  [4] setindex!(::MPS, ::ITensor{4}, ::UnitRange{Int64}, ::Pair{Symbol, Any}, ::Vararg{Pair{Symbol, Any}, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1340
  [5] setindex!(::MPS, ::ITensor{4}, ::UnitRange{Int64}, ::Pair{Symbol, Any}, ::Pair{Symbol, Any}, ::Pair{Symbol, Any})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1340
  [6] product(o::ITensor{4}, ψ::MPS, ns::Vector{Int64}; move_sites_back::Bool, apply_dag::Bool, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1555
  [7] product(As::Vector{ITensor}, ψ::MPS; move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1650
  [8] runcircuit(M::MPS, circuit_tensors::Vector{ITensor}; apply_dag::Nothing, cutoff::Float64, maxdim::Int64, svd_alg::String, move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ PastaQ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:86
  [9] #runcircuit#99
    @ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:188 [inlined]
 [10] SurfCirc(dz::Int64, dx::Int64, nr::Int64, PEZ::Matrix{Int64}, PEX::Matrix{Int64}, Synz::Matrix{Int64}, Synx::Matrix{Int64}, zsch::Vector{Any}, xsch::Vector{Any}, bsch::Array{Int64, 3}, layout::Vector{Any}, ql::Matrix{Int64}, zl::Vector{Int64}, xl::Vector{Int64}, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, pmz::Float64, pmx::Float64, acc::Float64, bd::Int64)
    @ Main /shared/MLSurface/JuliaCLTNDecoder/experiment/d7/permtest/more/mlsurfnc.jl:1337
 [11] macro expansion
    @ /shared/MLSurface/JuliaCLTNDecoder/experiment/d7/permtest/more/mlsurfnc.jl:1432 [inlined]
 [12] macro expansion
    @ ./timing.jl:287 [inlined]
 [13] SurfMC(dz::Int64, dx::Int64, nr::Int64, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, acc::Float64, bd::Int64, err::Float64, nt::Int64; sim_id::Int64)
    @ Main /shared/MLSurface/JuliaCLTNDecoder/experiment/d7/permtest/more/mlsurfnc.jl:1431
 [14] top-level scope
    @ /shared/MLSurface/JuliaCLTNDecoder/experiment/d7/permtest/more/mlsurfnc.jl:1514
in expression starting at /shared/MLSurface/JuliaCLTNDecoder/experiment/d7/permtest/more/mlsurfnc.jl:1512
mu is
0.015
number of trials is
200
number of Z or Y failures is
3
number of X failures is
0
average trial time
2.169535408965001
mu is
0.01
number of trials is
400
number of Z or Y failures is
4
number of X failures is
0
average trial time
4.202507385924998
mu is
0.013333333333333334
number of trials is
600
number of Z or Y failures is
8
number of X failures is
0
average trial time
6.275134427199998
stderr is
0.004686419757430041
target is
0.0013333333333333335
mu is
0.01125
number of trials is
800
number of Z or Y failures is
9
number of X failures is
0
average trial time
8.483662402470006
stderr is
0.003731179304020169
target is
0.001125
mu is
0.009
number of trials is
1000
number of Z or Y failures is
9
number of X failures is
0
average trial time
10.759685558690018
stderr is
0.0029879638431426726
target is
0.0009
mu is
0.009166666666666667
number of trials is
1200
number of Z or Y failures is
11
number of X failures is
0
average trial time
13.16367796182502
stderr is
0.0027523041963777497
target is
0.0009166666666666668
mu is
0.010714285714285714
number of trials is
1400
number of Z or Y failures is
15
number of X failures is
0
average trial time
15.58882053540001
stderr is
0.002752539901336169
target is
0.0010714285714285715
mu is
0.01125
number of trials is
1600
number of Z or Y failures is
18
number of X failures is
0
average trial time
17.98128237150499
stderr is
0.002637517061111602
target is
0.001125
mu is
0.01
number of trials is
1800
number of Z or Y failures is
18
number of X failures is
0
average trial time
20.47367471047499
stderr is
0.0023458595981068467
target is
0.001
mu is
0.0095
number of trials is
2000
number of Z or Y failures is
19
number of X failures is
0
average trial time
22.994942091304985
stderr is
0.0021696148539100558
target is
0.00095
mu is
0.010454545454545454
number of trials is
2200
number of Z or Y failures is
23
number of X failures is
0
average trial time
25.467940212429976
stderr is
0.002168991434842965
target is
0.0010454545454545454
mu is
0.01125
number of trials is
2400
number of Z or Y failures is
27
number of X failures is
0
average trial time
27.830331718439965
stderr is
0.002153299231952208
target is
0.001125
mu is
0.011538461538461539
number of trials is
2600
number of Z or Y failures is
30
number of X failures is
0
average trial time
30.14901060638501
stderr is
0.0020948392443598785
target is
0.001153846153846154
The SVD algorithm `"divide_and_conquer"` has thrown an error,
likely because of a convergance failure. You can try
other SVD algorithms that may converge better using the
`alg` (or `svd_alg` if called through `factorize` or MPS/MPO functionality) keyword argument:

 - "divide_and_conquer" is a divide-and-conquer algorithm
   (LAPACK's `gesdd`). It is fast, but may lead to some innacurate
   singular values for very ill-conditioned matrices.
   It also may sometimes fail to converge, leading to errors
   (in which case `"qr_iteration"` or `"recursive"` can be tried).

 - `"qr_iteration"` (LAPACK's `gesvd`) is typically slower 
   than "divide_and_conquer", especially for large matrices,
   but is more accurate for very ill-conditioned matrices 
   compared to `"divide_and_conquer"`.

 - `"recursive"` is ITensor's custom SVD algorithm. It is very
   reliable, but may be slow if high precision is needed.
   To get an `svd` of a matrix `A`, an eigendecomposition of
   ``A^{\dagger} A`` is used to compute `U` and then a `qr` of
   ``A^{\dagger} U`` is used to compute `V`. This is performed
   recursively to compute small singular values.

Returning `nothing`. For an output `F = svd(A, ...)` you can check if
`isnothing(F)` in your code and try a different algorithm.

To suppress this message in the future, you can wrap the `svd` call in the
`@suppress` macro from the `Suppressor` package.

