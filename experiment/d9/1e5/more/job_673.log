ERROR: LoadError: MethodError: no method matching iterate(::Nothing)
Closest candidates are:
  iterate(!Matched::Union{LinRange, StepRangeLen}) at range.jl:664
  iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Int64) at range.jl:664
  iterate(!Matched::T) where T<:Union{Base.KeySet{var"#s79", var"#s78"} where {var"#s79", var"#s78"<:Dict}, Base.ValueIterator{var"#s77"} where var"#s77"<:Dict} at dict.jl:693
  ...
Stacktrace:
  [1] indexed_iterate(I::Nothing, i::Int64)
    @ Base ./tuple.jl:89
  [2] MPS(A::ITensor{4}, sites::Vector{IndexSet{1, Index{Int64}, Tuple{Index{Int64}}}}; leftinds::Index{Int64}, orthocenter::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1388
  [3] setindex!(ψ::MPS, A::ITensor{4}, r::UnitRange{Int64}; orthocenter::Int64, perm::Vector{Int64}, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1328
  [4] setindex!(::MPS, ::ITensor{4}, ::UnitRange{Int64}, ::Pair{Symbol, Any}, ::Vararg{Pair{Symbol, Any}, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:orthocenter, :perm), Tuple{Int64, Vector{Int64}}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1340
  [5] swapbondsites(ψ::MPS, b::Int64; kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1419
  [6] movesite(ψ::MPS, n1n2::Pair{Int64, Int64}; orthocenter::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1447
  [7] _movesites(ψ::MPS, ns::Vector{Int64}, ns′::Vector{Int64}; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1474
  [8] movesites(ψ::MPS, nsns′::Vector{Pair{Int64, Int64}}; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1495
  [9] product(o::ITensor{4}, ψ::MPS, ns::Vector{Int64}; move_sites_back::Bool, apply_dag::Bool, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1548
 [10] product(As::Vector{ITensor}, ψ::MPS; move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1650
 [11] runcircuit(M::MPS, circuit_tensors::Vector{ITensor}; apply_dag::Nothing, cutoff::Float64, maxdim::Int64, svd_alg::String, move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ PastaQ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:86
 [12] #runcircuit#99
    @ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:188 [inlined]
 [13] SurfCirc(dz::Int64, dx::Int64, nr::Int64, PEZ::Matrix{Int64}, PEX::Matrix{Int64}, Synz::Matrix{Int64}, Synx::Matrix{Int64}, zsch::Vector{Any}, xsch::Vector{Any}, bsch::Array{Int64, 3}, layout::Vector{Any}, ql::Matrix{Int64}, zl::Vector{Int64}, xl::Vector{Int64}, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, pmz::Float64, pmx::Float64, acc::Float64, bd::Int64)
    @ Main /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/1e5/more/mlsurfnc.jl:1337
 [14] macro expansion
    @ /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/1e5/more/mlsurfnc.jl:1432 [inlined]
 [15] macro expansion
    @ ./timing.jl:287 [inlined]
 [16] SurfMC(dz::Int64, dx::Int64, nr::Int64, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, acc::Float64, bd::Int64, err::Float64, nt::Int64; sim_id::Int64)
    @ Main /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/1e5/more/mlsurfnc.jl:1431
 [17] top-level scope
    @ /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/1e5/more/mlsurfnc.jl:1514
in expression starting at /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/1e5/more/mlsurfnc.jl:1512
mu is
0.0
number of trials is
200
number of Z or Y failures is
0
number of X failures is
0
average trial time
2.252362104140001
mu is
0.0
number of trials is
400
number of Z or Y failures is
0
number of X failures is
0
average trial time
4.318927926785001
mu is
0.0
number of trials is
600
number of Z or Y failures is
0
number of X failures is
0
average trial time
6.382664958800001
mu is
0.0
number of trials is
800
number of Z or Y failures is
0
number of X failures is
0
average trial time
8.438328243279992
mu is
0.0
number of trials is
1000
number of Z or Y failures is
0
number of X failures is
0
average trial time
10.483324215939993
mu is
0.0
number of trials is
1200
number of Z or Y failures is
0
number of X failures is
0
average trial time
12.557424937104976
mu is
0.0
number of trials is
1400
number of Z or Y failures is
0
number of X failures is
0
average trial time
14.62413891929497
mu is
0.0
number of trials is
1600
number of Z or Y failures is
0
number of X failures is
0
average trial time
16.683453892074983
mu is
0.0
number of trials is
1800
number of Z or Y failures is
0
number of X failures is
0
average trial time
18.76563655115998
mu is
0.0
number of trials is
2000
number of Z or Y failures is
0
number of X failures is
0
average trial time
20.869260963354968
mu is
0.0
number of trials is
2200
number of Z or Y failures is
0
number of X failures is
0
average trial time
22.98244899158996
mu is
0.0
number of trials is
2400
number of Z or Y failures is
0
number of X failures is
0
average trial time
25.13540150068496
mu is
0.0
number of trials is
2600
number of Z or Y failures is
0
number of X failures is
0
average trial time
27.289691756589942
mu is
0.0
number of trials is
2800
number of Z or Y failures is
0
number of X failures is
0
average trial time
29.506677816679968
mu is
0.0
number of trials is
3000
number of Z or Y failures is
0
number of X failures is
0
average trial time
31.719930330314938
mu is
0.0
number of trials is
3200
number of Z or Y failures is
0
number of X failures is
0
average trial time
33.95009736138997
mu is
0.0
number of trials is
3400
number of Z or Y failures is
0
number of X failures is
0
average trial time
36.20384004407498
mu is
0.0
number of trials is
3600
number of Z or Y failures is
0
number of X failures is
0
average trial time
38.504460653554986
mu is
0.0
number of trials is
3800
number of Z or Y failures is
0
number of X failures is
0
average trial time
40.804110612759985
mu is
0.0
number of trials is
4000
number of Z or Y failures is
0
number of X failures is
0
average trial time
43.138074385605
mu is
0.0
number of trials is
4200
number of Z or Y failures is
0
number of X failures is
0
average trial time
45.45755708569494
mu is
0.0
number of trials is
4400
number of Z or Y failures is
0
number of X failures is
0
average trial time
47.78411950692991
mu is
0.0
number of trials is
4600
number of Z or Y failures is
0
number of X failures is
0
average trial time
50.1752300279299
mu is
0.0
number of trials is
4800
number of Z or Y failures is
0
number of X failures is
0
average trial time
52.57384799506495
mu is
0.0
number of trials is
5000
number of Z or Y failures is
0
number of X failures is
0
average trial time
54.954764260664945
mu is
0.0
number of trials is
5200
number of Z or Y failures is
0
number of X failures is
0
average trial time
57.34928209926492
mu is
0.0
number of trials is
5400
number of Z or Y failures is
0
number of X failures is
0
average trial time
59.783736424929955
mu is
0.0
number of trials is
5600
number of Z or Y failures is
0
number of X failures is
0
average trial time
62.202739176055026
mu is
0.0
number of trials is
5800
number of Z or Y failures is
0
number of X failures is
0
average trial time
64.67542774231498
mu is
0.0
number of trials is
6000
number of Z or Y failures is
0
number of X failures is
0
average trial time
67.14278122431001
mu is
0.0
number of trials is
6200
number of Z or Y failures is
0
number of X failures is
0
average trial time
69.60055447670003
mu is
0.0
number of trials is
6400
number of Z or Y failures is
0
number of X failures is
0
average trial time
72.07612456101
mu is
0.0
number of trials is
6600
number of Z or Y failures is
0
number of X failures is
0
average trial time
74.56936911485003
mu is
0.0
number of trials is
6800
number of Z or Y failures is
0
number of X failures is
0
average trial time
77.03512445868002
mu is
0.0
number of trials is
7000
number of Z or Y failures is
0
number of X failures is
0
average trial time
79.51997348277499
mu is
0.0
number of trials is
7200
number of Z or Y failures is
0
number of X failures is
0
average trial time
82.01757455122004
mu is
0.00013513513513513514
number of trials is
7400
number of Z or Y failures is
1
number of X failures is
0
average trial time
84.54634388269
mu is
0.00013157894736842105
number of trials is
7600
number of Z or Y failures is
1
number of X failures is
0
average trial time
87.00794940770994
mu is
0.0001282051282051282
number of trials is
7800
number of Z or Y failures is
1
number of X failures is
0
average trial time
89.46284557683008
mu is
0.000125
number of trials is
8000
number of Z or Y failures is
1
number of X failures is
0
average trial time
91.94021231685007
mu is
0.00012195121951219512
number of trials is
8200
number of Z or Y failures is
1
number of X failures is
0
average trial time
94.449422843505
mu is
0.00011904761904761905
number of trials is
8400
number of Z or Y failures is
1
number of X failures is
0
average trial time
96.92346298440992
mu is
0.00011627906976744187
number of trials is
8600
number of Z or Y failures is
1
number of X failures is
0
average trial time
99.40517644757998
mu is
0.00011363636363636364
number of trials is
8800
number of Z or Y failures is
1
number of X failures is
0
average trial time
101.87491170606486
mu is
0.00011111111111111112
number of trials is
9000
number of Z or Y failures is
1
number of X failures is
0
average trial time
104.3453094536998
mu is
0.00010869565217391305
number of trials is
9200
number of Z or Y failures is
1
number of X failures is
0
average trial time
106.84074997768987
mu is
0.00010638297872340425
number of trials is
9400
number of Z or Y failures is
1
number of X failures is
0
average trial time
109.29886292769984
mu is
0.00010416666666666667
number of trials is
9600
number of Z or Y failures is
1
number of X failures is
0
average trial time
111.72502399751487
mu is
0.00010204081632653062
number of trials is
9800
number of Z or Y failures is
1
number of X failures is
0
average trial time
114.13120522628988
mu is
0.0001
number of trials is
10000
number of Z or Y failures is
1
number of X failures is
0
average trial time
116.58188524250971
mu is
9.80392156862745e-5
number of trials is
10200
number of Z or Y failures is
1
number of X failures is
0
average trial time
119.02131167984982
mu is
9.615384615384615e-5
number of trials is
10400
number of Z or Y failures is
1
number of X failures is
0
average trial time
121.46404817316987
mu is
9.433962264150943e-5
number of trials is
10600
number of Z or Y failures is
1
number of X failures is
0
average trial time
123.90954795966489
mu is
9.259259259259259e-5
number of trials is
10800
number of Z or Y failures is
1
number of X failures is
0
average trial time
126.37232588956482
mu is
9.09090909090909e-5
number of trials is
11000
number of Z or Y failures is
1
number of X failures is
0
average trial time
128.8653034806448
mu is
8.928571428571429e-5
number of trials is
11200
number of Z or Y failures is
1
number of X failures is
0
average trial time
131.33214389290987
mu is
8.771929824561403e-5
number of trials is
11400
number of Z or Y failures is
1
number of X failures is
0
average trial time
133.74951305137992
mu is
8.620689655172413e-5
number of trials is
11600
number of Z or Y failures is
1
number of X failures is
0
average trial time
136.18190190584
mu is
8.474576271186441e-5
number of trials is
11800
number of Z or Y failures is
1
number of X failures is
0
average trial time
138.59399284570512
mu is
8.333333333333333e-5
number of trials is
12000
number of Z or Y failures is
1
number of X failures is
0
average trial time
141.02381881149512
mu is
8.19672131147541e-5
number of trials is
12200
number of Z or Y failures is
1
number of X failures is
0
average trial time
143.47505516702503
mu is
8.064516129032258e-5
number of trials is
12400
number of Z or Y failures is
1
number of X failures is
0
average trial time
145.8996511483151
mu is
7.936507936507937e-5
number of trials is
12600
number of Z or Y failures is
1
number of X failures is
0
average trial time
148.31490396231504
mu is
7.8125e-5
number of trials is
12800
number of Z or Y failures is
1
number of X failures is
0
average trial time
150.72412521299012
mu is
7.692307692307693e-5
number of trials is
13000
number of Z or Y failures is
1
number of X failures is
0
average trial time
153.1040436315403
mu is
7.575757575757576e-5
number of trials is
13200
number of Z or Y failures is
1
number of X failures is
0
average trial time
155.4984668992002
The SVD algorithm `"divide_and_conquer"` has thrown an error,
likely because of a convergance failure. You can try
other SVD algorithms that may converge better using the
`alg` (or `svd_alg` if called through `factorize` or MPS/MPO functionality) keyword argument:

 - "divide_and_conquer" is a divide-and-conquer algorithm
   (LAPACK's `gesdd`). It is fast, but may lead to some innacurate
   singular values for very ill-conditioned matrices.
   It also may sometimes fail to converge, leading to errors
   (in which case `"qr_iteration"` or `"recursive"` can be tried).

 - `"qr_iteration"` (LAPACK's `gesvd`) is typically slower 
   than "divide_and_conquer", especially for large matrices,
   but is more accurate for very ill-conditioned matrices 
   compared to `"divide_and_conquer"`.

 - `"recursive"` is ITensor's custom SVD algorithm. It is very
   reliable, but may be slow if high precision is needed.
   To get an `svd` of a matrix `A`, an eigendecomposition of
   ``A^{\dagger} A`` is used to compute `U` and then a `qr` of
   ``A^{\dagger} U`` is used to compute `V`. This is performed
   recursively to compute small singular values.

Returning `nothing`. For an output `F = svd(A, ...)` you can check if
`isnothing(F)` in your code and try a different algorithm.

To suppress this message in the future, you can wrap the `svd` call in the
`@suppress` macro from the `Suppressor` package.

