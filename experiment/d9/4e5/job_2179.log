ERROR: LoadError: MethodError: no method matching iterate(::Nothing)
Closest candidates are:
  iterate(!Matched::Union{LinRange, StepRangeLen}) at range.jl:664
  iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Int64) at range.jl:664
  iterate(!Matched::T) where T<:Union{Base.KeySet{var"#s79", var"#s78"} where {var"#s79", var"#s78"<:Dict}, Base.ValueIterator{var"#s77"} where var"#s77"<:Dict} at dict.jl:693
  ...
Stacktrace:
  [1] indexed_iterate(I::Nothing, i::Int64)
    @ Base ./tuple.jl:89
  [2] MPS(A::ITensor{4}, sites::Vector{IndexSet{1, Index{Int64}, Tuple{Index{Int64}}}}; leftinds::Index{Int64}, orthocenter::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1388
  [3] setindex!(ψ::MPS, A::ITensor{4}, r::UnitRange{Int64}; orthocenter::Int64, perm::Vector{Int64}, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1328
  [4] setindex!(::MPS, ::ITensor{4}, ::UnitRange{Int64}, ::Pair{Symbol, Any}, ::Vararg{Pair{Symbol, Any}, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:orthocenter, :perm), Tuple{Int64, Vector{Int64}}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1340
  [5] swapbondsites(ψ::MPS, b::Int64; kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1419
  [6] movesite(ψ::MPS, n1n2::Pair{Int64, Int64}; orthocenter::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1447
  [7] _movesites(ψ::MPS, ns::Vector{Int64}, ns′::Vector{Int64}; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1474
  [8] movesites(ψ::MPS, nsns′::Vector{Pair{Int64, Int64}}; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1495
  [9] product(o::ITensor{4}, ψ::MPS, ns::Vector{Int64}; move_sites_back::Bool, apply_dag::Bool, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1548
 [10] product(As::Vector{ITensor}, ψ::MPS; move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1650
 [11] runcircuit(M::MPS, circuit_tensors::Vector{ITensor}; apply_dag::Nothing, cutoff::Float64, maxdim::Int64, svd_alg::String, move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ PastaQ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:86
 [12] #runcircuit#99
    @ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:188 [inlined]
 [13] SurfCirc(dz::Int64, dx::Int64, nr::Int64, PEZ::Matrix{Int64}, PEX::Matrix{Int64}, Synz::Matrix{Int64}, Synx::Matrix{Int64}, zsch::Vector{Any}, xsch::Vector{Any}, bsch::Array{Int64, 3}, layout::Vector{Any}, ql::Matrix{Int64}, zl::Vector{Int64}, xl::Vector{Int64}, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, pmz::Float64, pmx::Float64, acc::Float64, bd::Int64)
    @ Main /shared/JuliaCLTNDecoder/experiment/d9/4e5/mlsurfnc.jl:1337
 [14] macro expansion
    @ /shared/JuliaCLTNDecoder/experiment/d9/4e5/mlsurfnc.jl:1432 [inlined]
 [15] macro expansion
    @ ./timing.jl:287 [inlined]
 [16] SurfMC(dz::Int64, dx::Int64, nr::Int64, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, acc::Float64, bd::Int64, err::Float64, nt::Int64; sim_id::Int64)
    @ Main /shared/JuliaCLTNDecoder/experiment/d9/4e5/mlsurfnc.jl:1431
 [17] top-level scope
    @ /shared/JuliaCLTNDecoder/experiment/d9/4e5/mlsurfnc.jl:1514
in expression starting at /shared/JuliaCLTNDecoder/experiment/d9/4e5/mlsurfnc.jl:1512
mu is
0.0
number of trials is
200
number of Z or Y failures is
0
number of X failures is
0
average trial time
3.002949772405001
mu is
0.0
number of trials is
400
number of Z or Y failures is
0
number of X failures is
0
average trial time
5.7877850665049975
mu is
0.0016666666666666668
number of trials is
600
number of Z or Y failures is
1
number of X failures is
0
average trial time
8.84594048669999
mu is
0.0025
number of trials is
800
number of Z or Y failures is
2
number of X failures is
0
average trial time
11.878045972919997
mu is
0.002
number of trials is
1000
number of Z or Y failures is
2
number of X failures is
0
average trial time
15.14562347292998
mu is
0.0016666666666666668
number of trials is
1200
number of Z or Y failures is
2
number of X failures is
0
average trial time
18.503785989984973
mu is
0.002142857142857143
number of trials is
1400
number of Z or Y failures is
3
number of X failures is
0
average trial time
21.929411839254996
mu is
0.001875
number of trials is
1600
number of Z or Y failures is
3
number of X failures is
0
average trial time
25.295187136245026
mu is
0.0016666666666666668
number of trials is
1800
number of Z or Y failures is
3
number of X failures is
0
average trial time
28.64548088148003
mu is
0.0015
number of trials is
2000
number of Z or Y failures is
3
number of X failures is
0
average trial time
31.960857506114994
mu is
0.0013636363636363637
number of trials is
2200
number of Z or Y failures is
3
number of X failures is
0
average trial time
35.26858423506001
mu is
0.00125
number of trials is
2400
number of Z or Y failures is
3
number of X failures is
0
average trial time
38.530012912090015
mu is
0.001153846153846154
number of trials is
2600
number of Z or Y failures is
3
number of X failures is
0
average trial time
41.73225286496007
mu is
0.0010714285714285715
number of trials is
2800
number of Z or Y failures is
3
number of X failures is
0
average trial time
45.00186836106009
mu is
0.001
number of trials is
3000
number of Z or Y failures is
3
number of X failures is
0
average trial time
48.27922077865007
mu is
0.0009375
number of trials is
3200
number of Z or Y failures is
3
number of X failures is
0
average trial time
51.50307763627003
mu is
0.0008823529411764706
number of trials is
3400
number of Z or Y failures is
3
number of X failures is
0
average trial time
54.76158531032504
mu is
0.0008333333333333334
number of trials is
3600
number of Z or Y failures is
3
number of X failures is
0
average trial time
57.92699111508998
mu is
0.0007894736842105263
number of trials is
3800
number of Z or Y failures is
3
number of X failures is
0
average trial time
61.07704179336503
mu is
0.00075
number of trials is
4000
number of Z or Y failures is
3
number of X failures is
0
average trial time
64.21148210415002
mu is
0.0007142857142857143
number of trials is
4200
number of Z or Y failures is
3
number of X failures is
0
average trial time
67.35295807001998
mu is
0.0006818181818181819
number of trials is
4400
number of Z or Y failures is
3
number of X failures is
0
average trial time
70.45857231867994
mu is
0.0008695652173913044
number of trials is
4600
number of Z or Y failures is
4
number of X failures is
0
average trial time
73.61185136073
mu is
0.0008333333333333334
number of trials is
4800
number of Z or Y failures is
4
number of X failures is
0
average trial time
76.80053653281995
mu is
0.001
number of trials is
5000
number of Z or Y failures is
5
number of X failures is
0
average trial time
79.96643104473493
stderr is
0.0004470346384717841
target is
0.0001
mu is
0.001153846153846154
number of trials is
5200
number of Z or Y failures is
6
number of X failures is
0
average trial time
83.08566622686996
stderr is
0.00047082915262299354
target is
0.0001153846153846154
mu is
0.0011111111111111111
number of trials is
5400
number of Z or Y failures is
6
number of X failures is
0
average trial time
86.21440253084488
stderr is
0.0004533991198123518
target is
0.00011111111111111112
mu is
0.00125
number of trials is
5600
number of Z or Y failures is
7
number of X failures is
0
average trial time
89.28678876730476
stderr is
0.00047220237699166447
target is
0.000125
mu is
0.001206896551724138
number of trials is
5800
number of Z or Y failures is
7
number of X failures is
0
average trial time
92.40221663743972
stderr is
0.00045592797048169676
target is
0.00012068965517241381
mu is
0.0013333333333333333
number of trials is
6000
number of Z or Y failures is
8
number of X failures is
0
average trial time
95.53554069732479
stderr is
0.0004711294087041092
target is
0.00013333333333333334
mu is
0.0012903225806451613
number of trials is
6200
number of Z or Y failures is
8
number of X failures is
0
average trial time
98.60235567281988
stderr is
0.0004559402779616636
target is
0.00012903225806451613
The SVD algorithm `"divide_and_conquer"` has thrown an error,
likely because of a convergance failure. You can try
other SVD algorithms that may converge better using the
`alg` (or `svd_alg` if called through `factorize` or MPS/MPO functionality) keyword argument:

 - "divide_and_conquer" is a divide-and-conquer algorithm
   (LAPACK's `gesdd`). It is fast, but may lead to some innacurate
   singular values for very ill-conditioned matrices.
   It also may sometimes fail to converge, leading to errors
   (in which case `"qr_iteration"` or `"recursive"` can be tried).

 - `"qr_iteration"` (LAPACK's `gesvd`) is typically slower 
   than "divide_and_conquer", especially for large matrices,
   but is more accurate for very ill-conditioned matrices 
   compared to `"divide_and_conquer"`.

 - `"recursive"` is ITensor's custom SVD algorithm. It is very
   reliable, but may be slow if high precision is needed.
   To get an `svd` of a matrix `A`, an eigendecomposition of
   ``A^{\dagger} A`` is used to compute `U` and then a `qr` of
   ``A^{\dagger} U`` is used to compute `V`. This is performed
   recursively to compute small singular values.

Returning `nothing`. For an output `F = svd(A, ...)` you can check if
`isnothing(F)` in your code and try a different algorithm.

To suppress this message in the future, you can wrap the `svd` call in the
`@suppress` macro from the `Suppressor` package.

