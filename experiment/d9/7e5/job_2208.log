ERROR: LoadError: MethodError: no method matching iterate(::Nothing)
Closest candidates are:
  iterate(!Matched::Union{LinRange, StepRangeLen}) at range.jl:664
  iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Int64) at range.jl:664
  iterate(!Matched::T) where T<:Union{Base.KeySet{var"#s79", var"#s78"} where {var"#s79", var"#s78"<:Dict}, Base.ValueIterator{var"#s77"} where var"#s77"<:Dict} at dict.jl:693
  ...
Stacktrace:
  [1] indexed_iterate(I::Nothing, i::Int64)
    @ Base ./tuple.jl:89
  [2] MPS(A::ITensor{4}, sites::Vector{IndexSet{1, Index{Int64}, Tuple{Index{Int64}}}}; leftinds::Index{Int64}, orthocenter::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1388
  [3] setindex!(ψ::MPS, A::ITensor{4}, r::UnitRange{Int64}; orthocenter::Int64, perm::Vector{Int64}, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1328
  [4] setindex!(::MPS, ::ITensor{4}, ::UnitRange{Int64}, ::Pair{Symbol, Any}, ::Vararg{Pair{Symbol, Any}, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:orthocenter, :perm), Tuple{Int64, Vector{Int64}}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1340
  [5] swapbondsites(ψ::MPS, b::Int64; kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1419
  [6] movesite(ψ::MPS, n1n2::Pair{Int64, Int64}; orthocenter::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1447
  [7] _movesites(ψ::MPS, ns::Vector{Int64}, ns′::Vector{Int64}; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1474
  [8] movesites(ψ::MPS, nsns′::Vector{Pair{Int64, Int64}}; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1495
  [9] product(o::ITensor{4}, ψ::MPS, ns::Vector{Int64}; move_sites_back::Bool, apply_dag::Bool, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1548
 [10] product(As::Vector{ITensor}, ψ::MPS; move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1650
 [11] runcircuit(M::MPS, circuit_tensors::Vector{ITensor}; apply_dag::Nothing, cutoff::Float64, maxdim::Int64, svd_alg::String, move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ PastaQ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:86
 [12] #runcircuit#99
    @ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:188 [inlined]
 [13] SurfCirc(dz::Int64, dx::Int64, nr::Int64, PEZ::Matrix{Int64}, PEX::Matrix{Int64}, Synz::Matrix{Int64}, Synx::Matrix{Int64}, zsch::Vector{Any}, xsch::Vector{Any}, bsch::Array{Int64, 3}, layout::Vector{Any}, ql::Matrix{Int64}, zl::Vector{Int64}, xl::Vector{Int64}, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, pmz::Float64, pmx::Float64, acc::Float64, bd::Int64)
    @ Main /shared/JuliaCLTNDecoder/experiment/d9/7e5/mlsurfnc.jl:1337
 [14] macro expansion
    @ /shared/JuliaCLTNDecoder/experiment/d9/7e5/mlsurfnc.jl:1432 [inlined]
 [15] macro expansion
    @ ./timing.jl:287 [inlined]
 [16] SurfMC(dz::Int64, dx::Int64, nr::Int64, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, acc::Float64, bd::Int64, err::Float64, nt::Int64; sim_id::Int64)
    @ Main /shared/JuliaCLTNDecoder/experiment/d9/7e5/mlsurfnc.jl:1431
 [17] top-level scope
    @ /shared/JuliaCLTNDecoder/experiment/d9/7e5/mlsurfnc.jl:1514
in expression starting at /shared/JuliaCLTNDecoder/experiment/d9/7e5/mlsurfnc.jl:1512
mu is
0.01
number of trials is
200
number of Z or Y failures is
2
number of X failures is
0
average trial time
3.8417632309700003
mu is
0.005
number of trials is
400
number of Z or Y failures is
2
number of X failures is
0
average trial time
7.6043401838700015
mu is
0.005
number of trials is
600
number of Z or Y failures is
3
number of X failures is
0
average trial time
11.596114297284993
mu is
0.00375
number of trials is
800
number of Z or Y failures is
3
number of X failures is
0
average trial time
15.920558343044988
mu is
0.003
number of trials is
1000
number of Z or Y failures is
3
number of X failures is
0
average trial time
20.00227857010997
mu is
0.005
number of trials is
1200
number of Z or Y failures is
6
number of X failures is
0
average trial time
24.396777453244994
stderr is
0.0020369808727370466
target is
0.0005
mu is
0.0064285714285714285
number of trials is
1400
number of Z or Y failures is
9
number of X failures is
0
average trial time
28.563653193979988
stderr is
0.002136721533576821
target is
0.0006428571428571429
mu is
0.0075
number of trials is
1600
number of Z or Y failures is
12
number of X failures is
0
average trial time
32.835649091334986
stderr is
0.0021576035973510203
target is
0.00075
mu is
0.006666666666666667
number of trials is
1800
number of Z or Y failures is
12
number of X failures is
0
average trial time
36.970519458899965
stderr is
0.0019186081876077336
target is
0.0006666666666666668
mu is
0.0065
number of trials is
2000
number of Z or Y failures is
13
number of X failures is
0
average trial time
41.04652048536997
stderr is
0.0017973564602277873
target is
0.00065
mu is
0.006363636363636364
number of trials is
2200
number of Z or Y failures is
14
number of X failures is
0
average trial time
45.19779674807998
stderr is
0.0016957186673913255
target is
0.0006363636363636364
mu is
0.00625
number of trials is
2400
number of Z or Y failures is
15
number of X failures is
0
average trial time
49.299525329004894
stderr is
0.001609027458508482
target is
0.0006250000000000001
mu is
0.006153846153846154
number of trials is
2600
number of Z or Y failures is
16
number of X failures is
0
average trial time
53.353343713654915
stderr is
0.0015340155368569653
target is
0.0006153846153846154
mu is
0.006071428571428571
number of trials is
2800
number of Z or Y failures is
17
number of X failures is
0
average trial time
57.39503540195487
stderr is
0.0014683229377641517
target is
0.0006071428571428572
mu is
0.006
number of trials is
3000
number of Z or Y failures is
18
number of X failures is
0
average trial time
61.35151947231985
stderr is
0.0014101995914157718
target is
0.0006000000000000001
mu is
0.0059375
number of trials is
3200
number of Z or Y failures is
19
number of X failures is
0
average trial time
65.37587124998483
stderr is
0.0013583182527285458
target is
0.0005937500000000001
mu is
0.005588235294117647
number of trials is
3400
number of Z or Y failures is
19
number of X failures is
0
average trial time
69.32760415350482
stderr is
0.001278629990063666
target is
0.0005588235294117647
mu is
0.006111111111111111
number of trials is
3600
number of Z or Y failures is
22
number of X failures is
0
average trial time
73.42756597476486
stderr is
0.0012990865442417817
target is
0.0006111111111111112
mu is
0.005789473684210527
number of trials is
3800
number of Z or Y failures is
22
number of X failures is
0
average trial time
77.56706736491984
stderr is
0.0012309036905509892
target is
0.0005789473684210527
mu is
0.00575
number of trials is
4000
number of Z or Y failures is
23
number of X failures is
0
average trial time
81.50056733892487
stderr is
0.001195655373819411
target is
0.000575
mu is
0.005714285714285714
number of trials is
4200
number of Z or Y failures is
24
number of X failures is
0
average trial time
85.42913554931502
stderr is
0.0011632247607513604
target is
0.0005714285714285715
The SVD algorithm `"divide_and_conquer"` has thrown an error,
likely because of a convergance failure. You can try
other SVD algorithms that may converge better using the
`alg` (or `svd_alg` if called through `factorize` or MPS/MPO functionality) keyword argument:

 - "divide_and_conquer" is a divide-and-conquer algorithm
   (LAPACK's `gesdd`). It is fast, but may lead to some innacurate
   singular values for very ill-conditioned matrices.
   It also may sometimes fail to converge, leading to errors
   (in which case `"qr_iteration"` or `"recursive"` can be tried).

 - `"qr_iteration"` (LAPACK's `gesvd`) is typically slower 
   than "divide_and_conquer", especially for large matrices,
   but is more accurate for very ill-conditioned matrices 
   compared to `"divide_and_conquer"`.

 - `"recursive"` is ITensor's custom SVD algorithm. It is very
   reliable, but may be slow if high precision is needed.
   To get an `svd` of a matrix `A`, an eigendecomposition of
   ``A^{\dagger} A`` is used to compute `U` and then a `qr` of
   ``A^{\dagger} U`` is used to compute `V`. This is performed
   recursively to compute small singular values.

Returning `nothing`. For an output `F = svd(A, ...)` you can check if
`isnothing(F)` in your code and try a different algorithm.

To suppress this message in the future, you can wrap the `svd` call in the
`@suppress` macro from the `Suppressor` package.

