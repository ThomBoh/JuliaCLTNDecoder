ERROR: LoadError: MethodError: no method matching iterate(::Nothing)
Closest candidates are:
  iterate(!Matched::Union{LinRange, StepRangeLen}) at range.jl:664
  iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Int64) at range.jl:664
  iterate(!Matched::T) where T<:Union{Base.KeySet{var"#s79", var"#s78"} where {var"#s79", var"#s78"<:Dict}, Base.ValueIterator{var"#s77"} where var"#s77"<:Dict} at dict.jl:693
  ...
Stacktrace:
  [1] indexed_iterate(I::Nothing, i::Int64)
    @ Base ./tuple.jl:89
  [2] MPS(A::ITensor{4}, sites::Vector{IndexSet{1, Index{Int64}, Tuple{Index{Int64}}}}; leftinds::Index{Int64}, orthocenter::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1388
  [3] setindex!(ψ::MPS, A::ITensor{4}, r::UnitRange{Int64}; orthocenter::Int64, perm::Vector{Int64}, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1328
  [4] setindex!(::MPS, ::ITensor{4}, ::UnitRange{Int64}, ::Pair{Symbol, Any}, ::Vararg{Pair{Symbol, Any}, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:orthocenter, :perm), Tuple{Int64, Vector{Int64}}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1340
  [5] swapbondsites(ψ::MPS, b::Int64; kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1419
  [6] movesite(ψ::MPS, n1n2::Pair{Int64, Int64}; orthocenter::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1447
  [7] _movesites(ψ::MPS, ns::Vector{Int64}, ns′::Vector{Int64}; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1474
  [8] movesites(ψ::MPS, nsns′::Vector{Pair{Int64, Int64}}; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1495
  [9] product(o::ITensor{4}, ψ::MPS, ns::Vector{Int64}; move_sites_back::Bool, apply_dag::Bool, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1548
 [10] product(As::Vector{ITensor}, ψ::MPS; move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1650
 [11] runcircuit(M::MPS, circuit_tensors::Vector{ITensor}; apply_dag::Nothing, cutoff::Float64, maxdim::Int64, svd_alg::String, move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ PastaQ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:86
 [12] #runcircuit#99
    @ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:188 [inlined]
 [13] SurfCirc(dz::Int64, dx::Int64, nr::Int64, PEZ::Matrix{Int64}, PEX::Matrix{Int64}, Synz::Matrix{Int64}, Synx::Matrix{Int64}, zsch::Vector{Any}, xsch::Vector{Any}, bsch::Array{Int64, 3}, layout::Vector{Any}, ql::Matrix{Int64}, zl::Vector{Int64}, xl::Vector{Int64}, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, pmz::Float64, pmx::Float64, acc::Float64, bd::Int64)
    @ Main /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/2e5/supp/mlsurfnc.jl:1337
 [14] macro expansion
    @ /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/2e5/supp/mlsurfnc.jl:1432 [inlined]
 [15] macro expansion
    @ ./timing.jl:287 [inlined]
 [16] SurfMC(dz::Int64, dx::Int64, nr::Int64, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, acc::Float64, bd::Int64, err::Float64, nt::Int64; sim_id::Int64)
    @ Main /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/2e5/supp/mlsurfnc.jl:1431
 [17] top-level scope
    @ /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/2e5/supp/mlsurfnc.jl:1514
in expression starting at /shared/MLSurface/JuliaCLTNDecoder/experiment/d9/2e5/supp/mlsurfnc.jl:1512
mu is
0.0
number of trials is
200
number of Z or Y failures is
0
number of X failures is
0
average trial time
2.4803777364449986
mu is
0.0
number of trials is
400
number of Z or Y failures is
0
number of X failures is
0
average trial time
4.783054129659997
mu is
0.0
number of trials is
600
number of Z or Y failures is
0
number of X failures is
0
average trial time
7.077980774509996
mu is
0.0
number of trials is
800
number of Z or Y failures is
0
number of X failures is
0
average trial time
9.399720763989995
mu is
0.0
number of trials is
1000
number of Z or Y failures is
0
number of X failures is
0
average trial time
11.768039626844997
mu is
0.0
number of trials is
1200
number of Z or Y failures is
0
number of X failures is
0
average trial time
14.178220222245004
mu is
0.0
number of trials is
1400
number of Z or Y failures is
0
number of X failures is
0
average trial time
16.646774305654993
mu is
0.0
number of trials is
1600
number of Z or Y failures is
0
number of X failures is
0
average trial time
19.174289670939995
mu is
0.0
number of trials is
1800
number of Z or Y failures is
0
number of X failures is
0
average trial time
21.754001419845004
mu is
0.0
number of trials is
2000
number of Z or Y failures is
0
number of X failures is
0
average trial time
24.429391621479976
mu is
0.0
number of trials is
2200
number of Z or Y failures is
0
number of X failures is
0
average trial time
27.078937999609984
mu is
0.0
number of trials is
2400
number of Z or Y failures is
0
number of X failures is
0
average trial time
29.81317433102
mu is
0.0
number of trials is
2600
number of Z or Y failures is
0
number of X failures is
0
average trial time
32.54914012596
mu is
0.0
number of trials is
2800
number of Z or Y failures is
0
number of X failures is
0
average trial time
35.312295743735035
mu is
0.0
number of trials is
3000
number of Z or Y failures is
0
number of X failures is
0
average trial time
38.10010775283004
mu is
0.0
number of trials is
3200
number of Z or Y failures is
0
number of X failures is
0
average trial time
40.86414725190004
mu is
0.0
number of trials is
3400
number of Z or Y failures is
0
number of X failures is
0
average trial time
43.5688866695951
mu is
0.0
number of trials is
3600
number of Z or Y failures is
0
number of X failures is
0
average trial time
46.35653669663008
mu is
0.0
number of trials is
3800
number of Z or Y failures is
0
number of X failures is
0
average trial time
49.095538506790014
mu is
0.0
number of trials is
4000
number of Z or Y failures is
0
number of X failures is
0
average trial time
51.84529441632007
mu is
0.0
number of trials is
4200
number of Z or Y failures is
0
number of X failures is
0
average trial time
54.632816478670094
mu is
0.0
number of trials is
4400
number of Z or Y failures is
0
number of X failures is
0
average trial time
57.37386944374011
mu is
0.0
number of trials is
4600
number of Z or Y failures is
0
number of X failures is
0
average trial time
60.12062058342514
mu is
0.0
number of trials is
4800
number of Z or Y failures is
0
number of X failures is
0
average trial time
62.836662567395145
mu is
0.0
number of trials is
5000
number of Z or Y failures is
0
number of X failures is
0
average trial time
65.60190931151516
mu is
0.0
number of trials is
5200
number of Z or Y failures is
0
number of X failures is
0
average trial time
68.3557348728802
mu is
0.0
number of trials is
5400
number of Z or Y failures is
0
number of X failures is
0
average trial time
71.14589176744525
mu is
0.0
number of trials is
5600
number of Z or Y failures is
0
number of X failures is
0
average trial time
73.86300043266024
mu is
0.0
number of trials is
5800
number of Z or Y failures is
0
number of X failures is
0
average trial time
76.54098875925028
mu is
0.0
number of trials is
6000
number of Z or Y failures is
0
number of X failures is
0
average trial time
79.24826331714029
mu is
0.00016129032258064516
number of trials is
6200
number of Z or Y failures is
1
number of X failures is
0
average trial time
81.95643804097526
mu is
0.00015625
number of trials is
6400
number of Z or Y failures is
1
number of X failures is
0
average trial time
84.63663133270022
mu is
0.00015151515151515152
number of trials is
6600
number of Z or Y failures is
1
number of X failures is
0
average trial time
87.33612141385514
mu is
0.00014705882352941175
number of trials is
6800
number of Z or Y failures is
1
number of X failures is
0
average trial time
90.0323288807801
mu is
0.00014285714285714287
number of trials is
7000
number of Z or Y failures is
1
number of X failures is
0
average trial time
92.71471769313003
mu is
0.0001388888888888889
number of trials is
7200
number of Z or Y failures is
1
number of X failures is
0
average trial time
95.40646054743007
mu is
0.00013513513513513514
number of trials is
7400
number of Z or Y failures is
1
number of X failures is
0
average trial time
98.10056927086005
mu is
0.00013157894736842105
number of trials is
7600
number of Z or Y failures is
1
number of X failures is
0
average trial time
100.74426793620005
mu is
0.0001282051282051282
number of trials is
7800
number of Z or Y failures is
1
number of X failures is
0
average trial time
103.45701955089005
mu is
0.000125
number of trials is
8000
number of Z or Y failures is
1
number of X failures is
0
average trial time
106.09529740553009
mu is
0.00012195121951219512
number of trials is
8200
number of Z or Y failures is
1
number of X failures is
0
average trial time
108.770619009815
mu is
0.00011904761904761905
number of trials is
8400
number of Z or Y failures is
1
number of X failures is
0
average trial time
111.43034430951008
mu is
0.00011627906976744187
number of trials is
8600
number of Z or Y failures is
1
number of X failures is
0
average trial time
114.111832350815
mu is
0.00011363636363636364
number of trials is
8800
number of Z or Y failures is
1
number of X failures is
0
average trial time
116.75499435047493
mu is
0.00011111111111111112
number of trials is
9000
number of Z or Y failures is
1
number of X failures is
0
average trial time
119.44948768069993
mu is
0.00010869565217391305
number of trials is
9200
number of Z or Y failures is
1
number of X failures is
0
average trial time
122.05980200924992
mu is
0.00010638297872340425
number of trials is
9400
number of Z or Y failures is
1
number of X failures is
0
average trial time
124.72341859118993
mu is
0.00010416666666666667
number of trials is
9600
number of Z or Y failures is
1
number of X failures is
0
average trial time
127.32823852372486
mu is
0.00010204081632653062
number of trials is
9800
number of Z or Y failures is
1
number of X failures is
0
average trial time
129.98886740006978
mu is
0.0001
number of trials is
10000
number of Z or Y failures is
1
number of X failures is
0
average trial time
132.58204401445465
mu is
9.80392156862745e-5
number of trials is
10200
number of Z or Y failures is
1
number of X failures is
0
average trial time
135.2415195579546
mu is
0.0001923076923076923
number of trials is
10400
number of Z or Y failures is
2
number of X failures is
0
average trial time
137.8734964031247
mu is
0.00018867924528301886
number of trials is
10600
number of Z or Y failures is
2
number of X failures is
0
average trial time
140.4966939018547
mu is
0.00018518518518518518
number of trials is
10800
number of Z or Y failures is
2
number of X failures is
0
average trial time
143.11676891014469
mu is
0.0001818181818181818
number of trials is
11000
number of Z or Y failures is
2
number of X failures is
0
average trial time
145.7394924991098
mu is
0.00017857142857142857
number of trials is
11200
number of Z or Y failures is
2
number of X failures is
0
average trial time
148.3872176328847
mu is
0.0002631578947368421
number of trials is
11400
number of Z or Y failures is
3
number of X failures is
0
average trial time
150.98568813371978
mu is
0.0002586206896551724
number of trials is
11600
number of Z or Y failures is
3
number of X failures is
0
average trial time
153.59343858146977
mu is
0.0002542372881355932
number of trials is
11800
number of Z or Y failures is
3
number of X failures is
0
average trial time
156.26646548515475
mu is
0.00025
number of trials is
12000
number of Z or Y failures is
3
number of X failures is
0
average trial time
158.85706246781484
mu is
0.0002459016393442623
number of trials is
12200
number of Z or Y failures is
3
number of X failures is
0
average trial time
161.44585867460495
The SVD algorithm `"divide_and_conquer"` has thrown an error,
likely because of a convergance failure. You can try
other SVD algorithms that may converge better using the
`alg` (or `svd_alg` if called through `factorize` or MPS/MPO functionality) keyword argument:

 - "divide_and_conquer" is a divide-and-conquer algorithm
   (LAPACK's `gesdd`). It is fast, but may lead to some innacurate
   singular values for very ill-conditioned matrices.
   It also may sometimes fail to converge, leading to errors
   (in which case `"qr_iteration"` or `"recursive"` can be tried).

 - `"qr_iteration"` (LAPACK's `gesvd`) is typically slower 
   than "divide_and_conquer", especially for large matrices,
   but is more accurate for very ill-conditioned matrices 
   compared to `"divide_and_conquer"`.

 - `"recursive"` is ITensor's custom SVD algorithm. It is very
   reliable, but may be slow if high precision is needed.
   To get an `svd` of a matrix `A`, an eigendecomposition of
   ``A^{\dagger} A`` is used to compute `U` and then a `qr` of
   ``A^{\dagger} U`` is used to compute `V`. This is performed
   recursively to compute small singular values.

Returning `nothing`. For an output `F = svd(A, ...)` you can check if
`isnothing(F)` in your code and try a different algorithm.

To suppress this message in the future, you can wrap the `svd` call in the
`@suppress` macro from the `Suppressor` package.

