ERROR: LoadError: MethodError: no method matching iterate(::Nothing)
Closest candidates are:
  iterate(!Matched::Union{LinRange, StepRangeLen}) at range.jl:664
  iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Int64) at range.jl:664
  iterate(!Matched::T) where T<:Union{Base.KeySet{var"#s79", var"#s78"} where {var"#s79", var"#s78"<:Dict}, Base.ValueIterator{var"#s77"} where var"#s77"<:Dict} at dict.jl:693
  ...
Stacktrace:
  [1] indexed_iterate(I::Nothing, i::Int64)
    @ Base ./tuple.jl:89
  [2] MPS(A::ITensor{4}, sites::Vector{IndexSet{1, Index{Int64}, Tuple{Index{Int64}}}}; leftinds::Index{Int64}, orthocenter::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1388
  [3] setindex!(ψ::MPS, A::ITensor{4}, r::UnitRange{Int64}; orthocenter::Int64, perm::Vector{Int64}, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1328
  [4] setindex!(::MPS, ::ITensor{4}, ::UnitRange{Int64}, ::Pair{Symbol, Any}, ::Vararg{Pair{Symbol, Any}, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:orthocenter, :perm), Tuple{Int64, Vector{Int64}}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1340
  [5] swapbondsites(ψ::MPS, b::Int64; kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1419
  [6] movesite(ψ::MPS, n1n2::Pair{Int64, Int64}; orthocenter::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1447
  [7] _movesites(ψ::MPS, ns::Vector{Int64}, ns′::Vector{Int64}; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1474
  [8] movesites(ψ::MPS, nsns′::Vector{Pair{Int64, Int64}}; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1495
  [9] product(As::Vector{ITensor}, ψ::MPS; move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1656
 [10] runcircuit(M::MPS, circuit_tensors::Vector{ITensor}; apply_dag::Nothing, cutoff::Float64, maxdim::Int64, svd_alg::String, move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ PastaQ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:86
 [11] #runcircuit#99
    @ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:188 [inlined]
 [12] SurfCirc(dz::Int64, dx::Int64, nr::Int64, PEZ::Matrix{Int64}, PEX::Matrix{Int64}, Synz::Matrix{Int64}, Synx::Matrix{Int64}, zsch::Vector{Any}, xsch::Vector{Any}, bsch::Array{Int64, 3}, layout::Vector{Any}, ql::Matrix{Int64}, zl::Vector{Int64}, xl::Vector{Int64}, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, pmz::Float64, pmx::Float64, acc::Float64, bd::Int64)
    @ Main /shared/MLSurface/JuliaCLTNDecoder/experiment/d7/2e5/supp/suppagain/more/mlsurfnc.jl:1337
 [13] macro expansion
    @ /shared/MLSurface/JuliaCLTNDecoder/experiment/d7/2e5/supp/suppagain/more/mlsurfnc.jl:1432 [inlined]
 [14] macro expansion
    @ ./timing.jl:287 [inlined]
 [15] SurfMC(dz::Int64, dx::Int64, nr::Int64, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, acc::Float64, bd::Int64, err::Float64, nt::Int64; sim_id::Int64)
    @ Main /shared/MLSurface/JuliaCLTNDecoder/experiment/d7/2e5/supp/suppagain/more/mlsurfnc.jl:1431
 [16] top-level scope
    @ /shared/MLSurface/JuliaCLTNDecoder/experiment/d7/2e5/supp/suppagain/more/mlsurfnc.jl:1514
in expression starting at /shared/MLSurface/JuliaCLTNDecoder/experiment/d7/2e5/supp/suppagain/more/mlsurfnc.jl:1512
mu is
0.005
number of trials is
200
number of Z or Y failures is
1
number of X failures is
0
average trial time
1.5483039421050007
mu is
0.0025
number of trials is
400
number of Z or Y failures is
1
number of X failures is
0
average trial time
2.899100336375002
mu is
0.0016666666666666668
number of trials is
600
number of Z or Y failures is
1
number of X failures is
0
average trial time
4.255258143425001
mu is
0.00125
number of trials is
800
number of Z or Y failures is
1
number of X failures is
0
average trial time
5.606015918085003
mu is
0.001
number of trials is
1000
number of Z or Y failures is
1
number of X failures is
0
average trial time
6.960874869169996
mu is
0.0008333333333333334
number of trials is
1200
number of Z or Y failures is
1
number of X failures is
0
average trial time
8.310869579699997
mu is
0.0007142857142857143
number of trials is
1400
number of Z or Y failures is
1
number of X failures is
0
average trial time
9.682501766009999
mu is
0.001875
number of trials is
1600
number of Z or Y failures is
3
number of X failures is
0
average trial time
11.045027769389987
mu is
0.0016666666666666668
number of trials is
1800
number of Z or Y failures is
3
number of X failures is
0
average trial time
12.445199515079983
mu is
0.0015
number of trials is
2000
number of Z or Y failures is
3
number of X failures is
0
average trial time
13.879121828999992
mu is
0.0013636363636363637
number of trials is
2200
number of Z or Y failures is
3
number of X failures is
0
average trial time
15.288517585680001
mu is
0.00125
number of trials is
2400
number of Z or Y failures is
3
number of X failures is
0
average trial time
16.72714938621999
mu is
0.001153846153846154
number of trials is
2600
number of Z or Y failures is
3
number of X failures is
0
average trial time
18.224151055984983
mu is
0.0010714285714285715
number of trials is
2800
number of Z or Y failures is
3
number of X failures is
0
average trial time
19.74161268783498
mu is
0.001
number of trials is
3000
number of Z or Y failures is
3
number of X failures is
0
average trial time
21.24883229412499
mu is
0.0009375
number of trials is
3200
number of Z or Y failures is
3
number of X failures is
0
average trial time
22.778464094229975
mu is
0.0008823529411764706
number of trials is
3400
number of Z or Y failures is
3
number of X failures is
0
average trial time
24.312892689519977
mu is
0.0008333333333333334
number of trials is
3600
number of Z or Y failures is
3
number of X failures is
0
average trial time
25.864557607094966
mu is
0.0007894736842105263
number of trials is
3800
number of Z or Y failures is
3
number of X failures is
0
average trial time
27.449922046584966
mu is
0.001
number of trials is
4000
number of Z or Y failures is
4
number of X failures is
0
average trial time
29.01050120622998
mu is
0.0009523809523809524
number of trials is
4200
number of Z or Y failures is
4
number of X failures is
0
average trial time
30.61394112422496
mu is
0.0009090909090909091
number of trials is
4400
number of Z or Y failures is
4
number of X failures is
0
average trial time
32.22771700193995
mu is
0.0008695652173913044
number of trials is
4600
number of Z or Y failures is
4
number of X failures is
0
average trial time
33.843378800225
mu is
0.0008333333333333334
number of trials is
4800
number of Z or Y failures is
4
number of X failures is
0
average trial time
35.462463921575015
mu is
0.0008
number of trials is
5000
number of Z or Y failures is
4
number of X failures is
0
average trial time
37.08166754375504
mu is
0.0009615384615384616
number of trials is
5200
number of Z or Y failures is
5
number of X failures is
0
average trial time
38.692201855160036
stderr is
0.0004298476193108059
target is
9.615384615384617e-5
mu is
0.0011111111111111111
number of trials is
5400
number of Z or Y failures is
6
number of X failures is
0
average trial time
40.3211629282
stderr is
0.0004533991198123518
target is
0.00011111111111111112
mu is
0.0010714285714285715
number of trials is
5600
number of Z or Y failures is
6
number of X failures is
0
average trial time
41.94229757023004
stderr is
0.00043721353231853836
target is
0.00010714285714285715
mu is
0.0010344827586206897
number of trials is
5800
number of Z or Y failures is
6
number of X failures is
0
average trial time
43.58692171383009
stderr is
0.00042214371007717017
target is
0.00010344827586206898
mu is
0.0011666666666666668
number of trials is
6000
number of Z or Y failures is
7
number of X failures is
0
average trial time
45.218327834890026
stderr is
0.0004407379806497172
target is
0.00011666666666666668
mu is
0.0011290322580645162
number of trials is
6200
number of Z or Y failures is
7
number of X failures is
0
average trial time
46.834361426910036
stderr is
0.00042652751489087766
target is
0.00011290322580645163
mu is
0.00125
number of trials is
6400
number of Z or Y failures is
8
number of X failures is
0
average trial time
48.476579926615116
stderr is
0.00044169994744091575
target is
0.000125
mu is
0.0012121212121212121
number of trials is
6600
number of Z or Y failures is
8
number of X failures is
0
average trial time
50.10315406667506
stderr is
0.0004283222084752586
target is
0.00012121212121212122
mu is
0.0013235294117647058
number of trials is
6800
number of Z or Y failures is
9
number of X failures is
0
average trial time
51.75122674203004
stderr is
0.00044091684045211797
target is
0.00013235294117647058
mu is
0.0012857142857142856
number of trials is
7000
number of Z or Y failures is
9
number of X failures is
0
average trial time
53.377996423365005
stderr is
0.0004283264255909529
target is
0.00012857142857142858
mu is
0.00125
number of trials is
7200
number of Z or Y failures is
9
number of X failures is
0
average trial time
55.01405222244002
stderr is
0.0004164350886764748
target is
0.000125
mu is
0.0012162162162162162
number of trials is
7400
number of Z or Y failures is
9
number of X failures is
0
average trial time
56.635695937759984
stderr is
0.0004051861784566149
target is
0.00012162162162162162
mu is
0.0011842105263157896
number of trials is
7600
number of Z or Y failures is
9
number of X failures is
0
average trial time
58.24877174917493
stderr is
0.0003945290038167438
target is
0.00011842105263157896
mu is
0.001153846153846154
number of trials is
7800
number of Z or Y failures is
9
number of X failures is
0
average trial time
59.85794188654993
stderr is
0.00038441807005341037
target is
0.0001153846153846154
mu is
0.00125
number of trials is
8000
number of Z or Y failures is
10
number of X failures is
0
average trial time
61.45952990322991
stderr is
0.0003950622694900094
target is
0.000125
mu is
0.0013414634146341464
number of trials is
8200
number of Z or Y failures is
11
number of X failures is
0
average trial time
63.08126950959487
stderr is
0.00040421970663642953
target is
0.00013414634146341464
mu is
0.0013095238095238095
number of trials is
8400
number of Z or Y failures is
11
number of X failures is
0
average trial time
64.68446185013481
stderr is
0.00039460116498082806
target is
0.00013095238095238096
mu is
0.0012790697674418604
number of trials is
8600
number of Z or Y failures is
11
number of X failures is
0
average trial time
66.3560120740098
stderr is
0.000385429736614489
target is
0.00012790697674418605
mu is
0.00125
number of trials is
8800
number of Z or Y failures is
11
number of X failures is
0
average trial time
67.96261617094984
stderr is
0.0003766749539211058
target is
0.000125
mu is
0.0012222222222222222
number of trials is
9000
number of Z or Y failures is
11
number of X failures is
0
average trial time
69.58076407537489
stderr is
0.00036830905600572646
target is
0.00012222222222222221
mu is
0.0011956521739130434
number of trials is
9200
number of Z or Y failures is
11
number of X failures is
0
average trial time
71.16532642405488
stderr is
0.00036030669464666215
target is
0.00011956521739130435
mu is
0.001276595744680851
number of trials is
9400
number of Z or Y failures is
12
number of X failures is
0
average trial time
72.76040655262987
stderr is
0.0003683057380940499
target is
0.0001276595744680851
mu is
0.00125
number of trials is
9600
number of Z or Y failures is
12
number of X failures is
0
average trial time
74.38282521086991
stderr is
0.0003606371039448713
target is
0.000125
mu is
0.0012244897959183673
number of trials is
9800
number of Z or Y failures is
12
number of X failures is
0
average trial time
75.97736435560489
stderr is
0.00035328129919464323
target is
0.00012244897959183673
mu is
0.0012
number of trials is
10000
number of Z or Y failures is
12
number of X failures is
0
average trial time
77.5961089535599
stderr is
0.0003462195644366157
target is
0.00011999999999999999
mu is
0.001176470588235294
number of trials is
10200
number of Z or Y failures is
12
number of X failures is
0
average trial time
79.15530680165988
stderr is
0.0003394346107933643
target is
0.0001176470588235294
mu is
0.001153846153846154
number of trials is
10400
number of Z or Y failures is
12
number of X failures is
0
average trial time
80.76408542085484
stderr is
0.00033291047859489983
target is
0.0001153846153846154
The SVD algorithm `"divide_and_conquer"` has thrown an error,
likely because of a convergance failure. You can try
other SVD algorithms that may converge better using the
`alg` (or `svd_alg` if called through `factorize` or MPS/MPO functionality) keyword argument:

 - "divide_and_conquer" is a divide-and-conquer algorithm
   (LAPACK's `gesdd`). It is fast, but may lead to some innacurate
   singular values for very ill-conditioned matrices.
   It also may sometimes fail to converge, leading to errors
   (in which case `"qr_iteration"` or `"recursive"` can be tried).

 - `"qr_iteration"` (LAPACK's `gesvd`) is typically slower 
   than "divide_and_conquer", especially for large matrices,
   but is more accurate for very ill-conditioned matrices 
   compared to `"divide_and_conquer"`.

 - `"recursive"` is ITensor's custom SVD algorithm. It is very
   reliable, but may be slow if high precision is needed.
   To get an `svd` of a matrix `A`, an eigendecomposition of
   ``A^{\dagger} A`` is used to compute `U` and then a `qr` of
   ``A^{\dagger} U`` is used to compute `V`. This is performed
   recursively to compute small singular values.

Returning `nothing`. For an output `F = svd(A, ...)` you can check if
`isnothing(F)` in your code and try a different algorithm.

To suppress this message in the future, you can wrap the `svd` call in the
`@suppress` macro from the `Suppressor` package.

