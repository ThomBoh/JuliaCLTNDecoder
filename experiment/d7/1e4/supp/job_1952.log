ERROR: LoadError: MethodError: no method matching iterate(::Nothing)
Closest candidates are:
  iterate(!Matched::Union{LinRange, StepRangeLen}) at range.jl:664
  iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Int64) at range.jl:664
  iterate(!Matched::T) where T<:Union{Base.KeySet{var"#s79", var"#s78"} where {var"#s79", var"#s78"<:Dict}, Base.ValueIterator{var"#s77"} where var"#s77"<:Dict} at dict.jl:693
  ...
Stacktrace:
  [1] indexed_iterate(I::Nothing, i::Int64)
    @ Base ./tuple.jl:89
  [2] MPS(A::ITensor{4}, sites::Vector{IndexSet{1, Index{Int64}, Tuple{Index{Int64}}}}; leftinds::Index{Int64}, orthocenter::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1388
  [3] setindex!(ψ::MPS, A::ITensor{4}, r::UnitRange{Int64}; orthocenter::Int64, perm::Nothing, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1328
  [4] setindex!(::MPS, ::ITensor{4}, ::UnitRange{Int64}, ::Pair{Symbol, Any}, ::Vararg{Pair{Symbol, Any}, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1340
  [5] setindex!(::MPS, ::ITensor{4}, ::UnitRange{Int64}, ::Pair{Symbol, Any}, ::Pair{Symbol, Any}, ::Pair{Symbol, Any})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1340
  [6] product(o::ITensor{4}, ψ::MPS, ns::Vector{Int64}; move_sites_back::Bool, apply_dag::Bool, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1555
  [7] product(As::Vector{ITensor}, ψ::MPS; move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1650
  [8] runcircuit(M::MPS, circuit_tensors::Vector{ITensor}; apply_dag::Nothing, cutoff::Float64, maxdim::Int64, svd_alg::String, move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ PastaQ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:86
  [9] #runcircuit#99
    @ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:188 [inlined]
 [10] SurfCirc(dz::Int64, dx::Int64, nr::Int64, PEZ::Matrix{Int64}, PEX::Matrix{Int64}, Synz::Matrix{Int64}, Synx::Matrix{Int64}, zsch::Vector{Any}, xsch::Vector{Any}, bsch::Array{Int64, 3}, layout::Vector{Any}, ql::Matrix{Int64}, zl::Vector{Int64}, xl::Vector{Int64}, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, pmz::Float64, pmx::Float64, acc::Float64, bd::Int64)
    @ Main /shared/JuliaCLTNDecoder/experiment/d7/1e4/mlsurfnc.jl:1337
 [11] macro expansion
    @ /shared/JuliaCLTNDecoder/experiment/d7/1e4/mlsurfnc.jl:1432 [inlined]
 [12] macro expansion
    @ ./timing.jl:287 [inlined]
 [13] SurfMC(dz::Int64, dx::Int64, nr::Int64, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, acc::Float64, bd::Int64, err::Float64, nt::Int64; sim_id::Int64)
    @ Main /shared/JuliaCLTNDecoder/experiment/d7/1e4/mlsurfnc.jl:1431
 [14] top-level scope
    @ /shared/JuliaCLTNDecoder/experiment/d7/1e4/mlsurfnc.jl:1514
in expression starting at /shared/JuliaCLTNDecoder/experiment/d7/1e4/mlsurfnc.jl:1512
mu is
0.03
number of trials is
200
number of Z or Y failures is
6
number of X failures is
0
average trial time
2.847833549475001
stderr is
0.012092607484694706
target is
0.003
mu is
0.02
number of trials is
400
number of Z or Y failures is
8
number of X failures is
0
average trial time
5.42429670431
stderr is
0.007008766440504624
target is
0.002
mu is
0.015
number of trials is
600
number of Z or Y failures is
9
number of X failures is
0
average trial time
8.133943763245004
stderr is
0.004966498785224799
target is
0.0015
mu is
0.01875
number of trials is
800
number of Z or Y failures is
15
number of X failures is
0
average trial time
10.881025399660011
stderr is
0.004798627971932838
target is
0.001875
mu is
0.02
number of trials is
1000
number of Z or Y failures is
20
number of X failures is
0
average trial time
13.653172063789993
stderr is
0.004429403980178329
target is
0.002
mu is
0.024166666666666666
number of trials is
1200
number of Z or Y failures is
29
number of X failures is
0
average trial time
16.706661892460016
stderr is
0.004434928360794405
target is
0.002416666666666667
mu is
0.024285714285714285
number of trials is
1400
number of Z or Y failures is
34
number of X failures is
0
average trial time
19.55490916628502
stderr is
0.0041155503122494875
target is
0.002428571428571429
mu is
0.026875
number of trials is
1600
number of Z or Y failures is
43
number of X failures is
0
average trial time
22.356625409895013
stderr is
0.004044215781233518
target is
0.0026875000000000002
mu is
0.02722222222222222
number of trials is
1800
number of Z or Y failures is
49
number of X failures is
0
average trial time
25.228863169810037
stderr is
0.0038366574558200664
target is
0.0027222222222222222
mu is
0.0265
number of trials is
2000
number of Z or Y failures is
53
number of X failures is
0
average trial time
27.960645060810037
stderr is
0.0035923985947875986
target is
0.00265
mu is
0.026818181818181817
number of trials is
2200
number of Z or Y failures is
59
number of X failures is
0
average trial time
30.75283624918507
stderr is
0.0034450778790340447
target is
0.002681818181818182
mu is
0.025416666666666667
number of trials is
2400
number of Z or Y failures is
61
number of X failures is
0
average trial time
33.62363766137006
stderr is
0.003213317673675591
target is
0.002541666666666667
mu is
0.02423076923076923
number of trials is
2600
number of Z or Y failures is
63
number of X failures is
0
average trial time
36.454430280740056
stderr is
0.0030161575313065064
target is
0.002423076923076923
mu is
0.023928571428571428
number of trials is
2800
number of Z or Y failures is
67
number of X failures is
0
average trial time
39.29600221667006
stderr is
0.002888668706271218
target is
0.0023928571428571428
mu is
0.023333333333333334
number of trials is
3000
number of Z or Y failures is
70
number of X failures is
0
average trial time
42.2725683204051
stderr is
0.0027565974024830117
target is
0.0023333333333333335
mu is
0.0234375
number of trials is
3200
number of Z or Y failures is
75
number of X failures is
0
average trial time
45.14467704891507
stderr is
0.002674844527432619
target is
0.0023437500000000003
mu is
0.022647058823529412
number of trials is
3400
number of Z or Y failures is
77
number of X failures is
0
average trial time
47.91378063911007
stderr is
0.0025518552371884364
target is
0.0022647058823529412
mu is
0.02361111111111111
number of trials is
3600
number of Z or Y failures is
85
number of X failures is
0
average trial time
50.77547511701508
stderr is
0.0025309216649980954
target is
0.002361111111111111
mu is
0.023421052631578947
number of trials is
3800
number of Z or Y failures is
89
number of X failures is
0
average trial time
53.6509334054751
stderr is
0.0024537043740758004
target is
0.002342105263157895
mu is
0.023
number of trials is
4000
number of Z or Y failures is
92
number of X failures is
0
average trial time
56.51031554476016
stderr is
0.00237047564608818
target is
0.0023
mu is
0.023333333333333334
number of trials is
4200
number of Z or Y failures is
98
number of X failures is
0
average trial time
59.39576540370516
stderr is
0.002329639053741282
target is
0.0023333333333333335
mu is
0.023181818181818182
number of trials is
4400
number of Z or Y failures is
102
number of X failures is
0
average trial time
62.25066030137515
stderr is
0.002268838765703928
target is
0.002318181818181818
mu is
0.023043478260869565
number of trials is
4600
number of Z or Y failures is
106
number of X failures is
0
average trial time
65.1395238520051
stderr is
0.0022124829378492522
target is
0.0023043478260869566
mu is
0.023125
number of trials is
4800
number of Z or Y failures is
111
number of X failures is
0
average trial time
67.79368908194515
stderr is
0.002169626583390914
target is
0.0023125
mu is
0.0228
number of trials is
5000
number of Z or Y failures is
114
number of X failures is
0
average trial time
70.46531738912518
stderr is
0.0021111426727431133
target is
0.0022800000000000003
mu is
0.023076923076923078
number of trials is
5200
number of Z or Y failures is
120
number of X failures is
0
average trial time
73.16160625301518
stderr is
0.002082376369475001
target is
0.002307692307692308
mu is
0.023148148148148147
number of trials is
5400
number of Z or Y failures is
125
number of X failures is
0
average trial time
75.8317898840902
stderr is
0.002046519159818873
target is
0.0023148148148148147
mu is
0.023392857142857142
number of trials is
5600
number of Z or Y failures is
131
number of X failures is
0
average trial time
78.59732713976527
stderr is
0.0020199766478144854
target is
0.0023392857142857143
mu is
0.02327586206896552
number of trials is
5800
number of Z or Y failures is
135
number of X failures is
0
average trial time
81.41108223074026
stderr is
0.001979986792955443
target is
0.002327586206896552
The SVD algorithm `"divide_and_conquer"` has thrown an error,
likely because of a convergance failure. You can try
other SVD algorithms that may converge better using the
`alg` (or `svd_alg` if called through `factorize` or MPS/MPO functionality) keyword argument:

 - "divide_and_conquer" is a divide-and-conquer algorithm
   (LAPACK's `gesdd`). It is fast, but may lead to some innacurate
   singular values for very ill-conditioned matrices.
   It also may sometimes fail to converge, leading to errors
   (in which case `"qr_iteration"` or `"recursive"` can be tried).

 - `"qr_iteration"` (LAPACK's `gesvd`) is typically slower 
   than "divide_and_conquer", especially for large matrices,
   but is more accurate for very ill-conditioned matrices 
   compared to `"divide_and_conquer"`.

 - `"recursive"` is ITensor's custom SVD algorithm. It is very
   reliable, but may be slow if high precision is needed.
   To get an `svd` of a matrix `A`, an eigendecomposition of
   ``A^{\dagger} A`` is used to compute `U` and then a `qr` of
   ``A^{\dagger} U`` is used to compute `V`. This is performed
   recursively to compute small singular values.

Returning `nothing`. For an output `F = svd(A, ...)` you can check if
`isnothing(F)` in your code and try a different algorithm.

To suppress this message in the future, you can wrap the `svd` call in the
`@suppress` macro from the `Suppressor` package.

