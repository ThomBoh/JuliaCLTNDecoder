ERROR: LoadError: MethodError: no method matching iterate(::Nothing)
Closest candidates are:
  iterate(!Matched::Union{LinRange, StepRangeLen}) at range.jl:664
  iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Int64) at range.jl:664
  iterate(!Matched::T) where T<:Union{Base.KeySet{var"#s79", var"#s78"} where {var"#s79", var"#s78"<:Dict}, Base.ValueIterator{var"#s77"} where var"#s77"<:Dict} at dict.jl:693
  ...
Stacktrace:
  [1] indexed_iterate(I::Nothing, i::Int64)
    @ Base ./tuple.jl:89
  [2] MPS(A::ITensor{4}, sites::Vector{IndexSet{1, Index{Int64}, Tuple{Index{Int64}}}}; leftinds::Index{Int64}, orthocenter::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1388
  [3] setindex!(ψ::MPS, A::ITensor{4}, r::UnitRange{Int64}; orthocenter::Int64, perm::Nothing, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1328
  [4] setindex!(::MPS, ::ITensor{4}, ::UnitRange{Int64}, ::Pair{Symbol, Any}, ::Vararg{Pair{Symbol, Any}, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1340
  [5] setindex!(::MPS, ::ITensor{4}, ::UnitRange{Int64}, ::Pair{Symbol, Any}, ::Pair{Symbol, Any}, ::Pair{Symbol, Any})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1340
  [6] product(o::ITensor{4}, ψ::MPS, ns::Vector{Int64}; move_sites_back::Bool, apply_dag::Bool, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1555
  [7] product(As::Vector{ITensor}, ψ::MPS; move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1650
  [8] runcircuit(M::MPS, circuit_tensors::Vector{ITensor}; apply_dag::Nothing, cutoff::Float64, maxdim::Int64, svd_alg::String, move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ PastaQ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:86
  [9] #runcircuit#99
    @ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:188 [inlined]
 [10] SurfCirc(dz::Int64, dx::Int64, nr::Int64, PEZ::Matrix{Int64}, PEX::Matrix{Int64}, Synz::Matrix{Int64}, Synx::Matrix{Int64}, zsch::Vector{Any}, xsch::Vector{Any}, bsch::Array{Int64, 3}, layout::Vector{Any}, ql::Matrix{Int64}, zl::Vector{Int64}, xl::Vector{Int64}, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, pmz::Float64, pmx::Float64, acc::Float64, bd::Int64)
    @ Main /shared/MLSurface/JuliaCLTNDecoder/experiment/d7/1e4/supp/mlsurfnc.jl:1337
 [11] macro expansion
    @ /shared/MLSurface/JuliaCLTNDecoder/experiment/d7/1e4/supp/mlsurfnc.jl:1432 [inlined]
 [12] macro expansion
    @ ./timing.jl:287 [inlined]
 [13] SurfMC(dz::Int64, dx::Int64, nr::Int64, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, acc::Float64, bd::Int64, err::Float64, nt::Int64; sim_id::Int64)
    @ Main /shared/MLSurface/JuliaCLTNDecoder/experiment/d7/1e4/supp/mlsurfnc.jl:1431
 [14] top-level scope
    @ /shared/MLSurface/JuliaCLTNDecoder/experiment/d7/1e4/supp/mlsurfnc.jl:1514
in expression starting at /shared/MLSurface/JuliaCLTNDecoder/experiment/d7/1e4/supp/mlsurfnc.jl:1512
mu is
0.035
number of trials is
200
number of Z or Y failures is
7
number of X failures is
0
average trial time
2.57768881115
stderr is
0.013027801736688053
target is
0.0035000000000000005
mu is
0.0425
number of trials is
400
number of Z or Y failures is
17
number of X failures is
0
average trial time
5.115106965895
stderr is
0.01009897759037653
target is
0.00425
mu is
0.03333333333333333
number of trials is
600
number of Z or Y failures is
20
number of X failures is
0
average trial time
7.709649077839999
stderr is
0.007334395633079884
target is
0.0033333333333333335
mu is
0.02875
number of trials is
800
number of Z or Y failures is
23
number of X failures is
0
average trial time
10.445766146169992
stderr is
0.005911681812506098
target is
0.0028750000000000004
mu is
0.027
number of trials is
1000
number of Z or Y failures is
27
number of X failures is
0
average trial time
13.200261868415003
stderr is
0.005128089049275305
target is
0.0027
mu is
0.02666666666666667
number of trials is
1200
number of Z or Y failures is
32
number of X failures is
0
average trial time
15.981529454794998
stderr is
0.004652705595037297
target is
0.002666666666666667
mu is
0.027142857142857142
number of trials is
1400
number of Z or Y failures is
38
number of X failures is
0
average trial time
18.92512008113499
stderr is
0.004344536589389034
target is
0.0027142857142857142
mu is
0.024375
number of trials is
1600
number of Z or Y failures is
39
number of X failures is
0
average trial time
21.736458941674986
stderr is
0.0038564662992269447
target is
0.0024375000000000004
mu is
0.022222222222222223
number of trials is
1800
number of Z or Y failures is
40
number of X failures is
0
average trial time
24.40986026639499
stderr is
0.0034753475527508834
target is
0.0022222222222222222
mu is
0.023
number of trials is
2000
number of Z or Y failures is
46
number of X failures is
0
average trial time
27.192769908899994
stderr is
0.0033527780362380293
target is
0.0023
mu is
0.023636363636363636
number of trials is
2200
number of Z or Y failures is
52
number of X failures is
0
average trial time
30.096253727814986
stderr is
0.003239541253855429
target is
0.0023636363636363638
mu is
0.022916666666666665
number of trials is
2400
number of Z or Y failures is
55
number of X failures is
0
average trial time
32.979988345339976
stderr is
0.0030551068402867904
target is
0.0022916666666666667
mu is
0.023076923076923078
number of trials is
2600
number of Z or Y failures is
60
number of X failures is
0
average trial time
35.75630149727501
stderr is
0.0029452081648618546
target is
0.002307692307692308
The SVD algorithm `"divide_and_conquer"` has thrown an error,
likely because of a convergance failure. You can try
other SVD algorithms that may converge better using the
`alg` (or `svd_alg` if called through `factorize` or MPS/MPO functionality) keyword argument:

 - "divide_and_conquer" is a divide-and-conquer algorithm
   (LAPACK's `gesdd`). It is fast, but may lead to some innacurate
   singular values for very ill-conditioned matrices.
   It also may sometimes fail to converge, leading to errors
   (in which case `"qr_iteration"` or `"recursive"` can be tried).

 - `"qr_iteration"` (LAPACK's `gesvd`) is typically slower 
   than "divide_and_conquer", especially for large matrices,
   but is more accurate for very ill-conditioned matrices 
   compared to `"divide_and_conquer"`.

 - `"recursive"` is ITensor's custom SVD algorithm. It is very
   reliable, but may be slow if high precision is needed.
   To get an `svd` of a matrix `A`, an eigendecomposition of
   ``A^{\dagger} A`` is used to compute `U` and then a `qr` of
   ``A^{\dagger} U`` is used to compute `V`. This is performed
   recursively to compute small singular values.

Returning `nothing`. For an output `F = svd(A, ...)` you can check if
`isnothing(F)` in your code and try a different algorithm.

To suppress this message in the future, you can wrap the `svd` call in the
`@suppress` macro from the `Suppressor` package.

