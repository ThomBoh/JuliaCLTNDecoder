ERROR: LoadError: MethodError: no method matching iterate(::Nothing)
Closest candidates are:
  iterate(!Matched::Union{LinRange, StepRangeLen}) at range.jl:664
  iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Int64) at range.jl:664
  iterate(!Matched::T) where T<:Union{Base.KeySet{var"#s79", var"#s78"} where {var"#s79", var"#s78"<:Dict}, Base.ValueIterator{var"#s77"} where var"#s77"<:Dict} at dict.jl:693
  ...
Stacktrace:
  [1] indexed_iterate(I::Nothing, i::Int64)
    @ Base ./tuple.jl:89
  [2] MPS(A::ITensor{4}, sites::Vector{IndexSet{1, Index{Int64}, Tuple{Index{Int64}}}}; leftinds::Index{Int64}, orthocenter::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1388
  [3] setindex!(ψ::MPS, A::ITensor{4}, r::UnitRange{Int64}; orthocenter::Int64, perm::Vector{Int64}, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1328
  [4] setindex!(::MPS, ::ITensor{4}, ::UnitRange{Int64}, ::Pair{Symbol, Any}, ::Vararg{Pair{Symbol, Any}, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:orthocenter, :perm), Tuple{Int64, Vector{Int64}}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1340
  [5] swapbondsites(ψ::MPS, b::Int64; kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:ortho, :cutoff, :maxdim, :svd_alg), Tuple{String, Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1419
  [6] movesite(ψ::MPS, n1n2::Pair{Int64, Int64}; orthocenter::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1447
  [7] _movesites(ψ::MPS, ns::Vector{Int64}, ns′::Vector{Int64}; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1474
  [8] movesites(ψ::MPS, nsns′::Vector{Pair{Int64, Int64}}; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1495
  [9] product(As::Vector{ITensor}, ψ::MPS; move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cutoff, :maxdim, :svd_alg), Tuple{Float64, Int64, String}}})
    @ ITensors ~/.julia/packages/ITensors/Ligbx/src/mps/abstractmps.jl:1656
 [10] runcircuit(M::MPS, circuit_tensors::Vector{ITensor}; apply_dag::Nothing, cutoff::Float64, maxdim::Int64, svd_alg::String, move_sites_back::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ PastaQ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:86
 [11] #runcircuit#99
    @ ~/.julia/packages/PastaQ/9VxGO/src/circuits/runcircuit.jl:188 [inlined]
 [12] SurfCirc(dz::Int64, dx::Int64, nr::Int64, PEZ::Matrix{Int64}, PEX::Matrix{Int64}, Synz::Matrix{Int64}, Synx::Matrix{Int64}, zsch::Vector{Any}, xsch::Vector{Any}, bsch::Array{Int64, 3}, layout::Vector{Any}, ql::Matrix{Int64}, zl::Vector{Int64}, xl::Vector{Int64}, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, pmz::Float64, pmx::Float64, acc::Float64, bd::Int64)
    @ Main /shared/JuliaCLTNDecoder/experiment/d9/4e5/mlsurfnc.jl:1337
 [13] macro expansion
    @ /shared/JuliaCLTNDecoder/experiment/d9/4e5/mlsurfnc.jl:1432 [inlined]
 [14] macro expansion
    @ ./timing.jl:287 [inlined]
 [15] SurfMC(dz::Int64, dx::Int64, nr::Int64, p::Float64, al2::Int64, tmeas::Float64, k2::Float64, nth::Int64, acc::Float64, bd::Int64, err::Float64, nt::Int64; sim_id::Int64)
    @ Main /shared/JuliaCLTNDecoder/experiment/d9/4e5/mlsurfnc.jl:1431
 [16] top-level scope
    @ /shared/JuliaCLTNDecoder/experiment/d9/4e5/mlsurfnc.jl:1514
in expression starting at /shared/JuliaCLTNDecoder/experiment/d9/4e5/mlsurfnc.jl:1512
mu is
0.005
number of trials is
200
number of Z or Y failures is
1
number of X failures is
0
average trial time
2.9258534962799985
mu is
0.005
number of trials is
400
number of Z or Y failures is
2
number of X failures is
0
average trial time
5.775055606544998
mu is
0.0033333333333333335
number of trials is
600
number of Z or Y failures is
2
number of X failures is
0
average trial time
8.681922718749997
mu is
0.00375
number of trials is
800
number of Z or Y failures is
3
number of X failures is
0
average trial time
11.796621326770005
mu is
0.003
number of trials is
1000
number of Z or Y failures is
3
number of X failures is
0
average trial time
15.095485662375008
mu is
0.0025
number of trials is
1200
number of Z or Y failures is
3
number of X failures is
0
average trial time
18.346359890600016
mu is
0.002857142857142857
number of trials is
1400
number of Z or Y failures is
4
number of X failures is
0
average trial time
21.798997189505002
mu is
0.003125
number of trials is
1600
number of Z or Y failures is
5
number of X failures is
0
average trial time
25.208869883374977
stderr is
0.0013957933707514326
target is
0.00031250000000000006
mu is
0.002777777777777778
number of trials is
1800
number of Z or Y failures is
5
number of X failures is
0
average trial time
28.623466251629985
stderr is
0.0012408781628369455
target is
0.0002777777777777778
mu is
0.0025
number of trials is
2000
number of Z or Y failures is
5
number of X failures is
0
average trial time
31.95694937838497
stderr is
0.0011169148353275139
target is
0.00025
mu is
0.0022727272727272726
number of trials is
2200
number of Z or Y failures is
5
number of X failures is
0
average trial time
35.30762214379998
stderr is
0.0010154696992438247
target is
0.00022727272727272727
mu is
0.0020833333333333333
number of trials is
2400
number of Z or Y failures is
5
number of X failures is
0
average trial time
38.622382696639946
stderr is
0.0009309179304475019
target is
0.00020833333333333335
mu is
0.0019230769230769232
number of trials is
2600
number of Z or Y failures is
5
number of X failures is
0
average trial time
41.942775693574966
stderr is
0.0008593640772379081
target is
0.00019230769230769233
mu is
0.0017857142857142857
number of trials is
2800
number of Z or Y failures is
5
number of X failures is
0
average trial time
45.32422811902496
stderr is
0.0007980248729344898
target is
0.00017857142857142857
mu is
0.0016666666666666668
number of trials is
3000
number of Z or Y failures is
5
number of X failures is
0
average trial time
48.616753210175055
stderr is
0.0007448587569592657
target is
0.0001666666666666667
mu is
0.0015625
number of trials is
3200
number of Z or Y failures is
5
number of X failures is
0
average trial time
51.83378430020005
stderr is
0.0006983342377708639
target is
0.00015625000000000003
mu is
0.0014705882352941176
number of trials is
3400
number of Z or Y failures is
5
number of X failures is
0
average trial time
55.03103108646507
stderr is
0.0006572799615000046
target is
0.00014705882352941178
mu is
0.0016666666666666668
number of trials is
3600
number of Z or Y failures is
6
number of X failures is
0
average trial time
58.274562891030016
stderr is
0.0006799410122840467
target is
0.0001666666666666667
mu is
0.0015789473684210526
number of trials is
3800
number of Z or Y failures is
6
number of X failures is
0
average trial time
61.58990486399505
stderr is
0.0006441782319610452
target is
0.00015789473684210527
mu is
0.0015
number of trials is
4000
number of Z or Y failures is
6
number of X failures is
0
average trial time
64.78724347509507
stderr is
0.0006119894874776819
target is
0.00015000000000000001
mu is
0.0014285714285714286
number of trials is
4200
number of Z or Y failures is
6
number of X failures is
0
average trial time
68.04115448642004
stderr is
0.0005828645075092929
target is
0.00014285714285714287
mu is
0.0013636363636363637
number of trials is
4400
number of Z or Y failures is
6
number of X failures is
0
average trial time
71.25118039319005
stderr is
0.0005563857443358373
target is
0.00013636363636363637
mu is
0.0013043478260869566
number of trials is
4600
number of Z or Y failures is
6
number of X failures is
0
average trial time
74.461758896825
stderr is
0.0005322082275627087
target is
0.00013043478260869567
mu is
0.00125
number of trials is
4800
number of Z or Y failures is
6
number of X failures is
0
average trial time
77.57271654327995
stderr is
0.0005100444517684177
target is
0.000125
mu is
0.0014
number of trials is
5000
number of Z or Y failures is
7
number of X failures is
0
average trial time
80.64256700301496
stderr is
0.0005288326132024738
target is
0.00014000000000000001
mu is
0.001346153846153846
number of trials is
5200
number of Z or Y failures is
7
number of X failures is
0
average trial time
83.83893364163492
stderr is
0.0005085046503372084
target is
0.0001346153846153846
mu is
0.0012962962962962963
number of trials is
5400
number of Z or Y failures is
7
number of X failures is
0
average trial time
87.05959299501494
stderr is
0.0004896816237601342
target is
0.00012962962962962963
mu is
0.00125
number of trials is
5600
number of Z or Y failures is
7
number of X failures is
0
average trial time
90.1307803867649
stderr is
0.00047220237699166447
target is
0.000125
mu is
0.001379310344827586
number of trials is
5800
number of Z or Y failures is
8
number of X failures is
0
average trial time
93.2729622294598
stderr is
0.00048736543197788144
target is
0.00013793103448275863
mu is
0.0015
number of trials is
6000
number of Z or Y failures is
9
number of X failures is
0
average trial time
96.4840903271197
stderr is
0.00049966649987952
target is
0.00015000000000000001
mu is
0.0014516129032258066
number of trials is
6200
number of Z or Y failures is
9
number of X failures is
0
average trial time
99.54434335482483
stderr is
0.0004835586417660389
target is
0.00014516129032258066
mu is
0.00140625
number of trials is
6400
number of Z or Y failures is
9
number of X failures is
0
average trial time
102.68225604223989
stderr is
0.0004684568938278357
target is
0.000140625
mu is
0.0013636363636363637
number of trials is
6600
number of Z or Y failures is
9
number of X failures is
0
average trial time
105.79119716281001
stderr is
0.00045426984715037446
target is
0.00013636363636363637
mu is
0.0013235294117647058
number of trials is
6800
number of Z or Y failures is
9
number of X failures is
0
average trial time
108.92371030490499
stderr is
0.00044091684045211797
target is
0.00013235294117647058
mu is
0.0015714285714285715
number of trials is
7000
number of Z or Y failures is
11
number of X failures is
0
average trial time
112.04150855494493
stderr is
0.00047346494103483794
target is
0.00015714285714285716
The SVD algorithm `"divide_and_conquer"` has thrown an error,
likely because of a convergance failure. You can try
other SVD algorithms that may converge better using the
`alg` (or `svd_alg` if called through `factorize` or MPS/MPO functionality) keyword argument:

 - "divide_and_conquer" is a divide-and-conquer algorithm
   (LAPACK's `gesdd`). It is fast, but may lead to some innacurate
   singular values for very ill-conditioned matrices.
   It also may sometimes fail to converge, leading to errors
   (in which case `"qr_iteration"` or `"recursive"` can be tried).

 - `"qr_iteration"` (LAPACK's `gesvd`) is typically slower 
   than "divide_and_conquer", especially for large matrices,
   but is more accurate for very ill-conditioned matrices 
   compared to `"divide_and_conquer"`.

 - `"recursive"` is ITensor's custom SVD algorithm. It is very
   reliable, but may be slow if high precision is needed.
   To get an `svd` of a matrix `A`, an eigendecomposition of
   ``A^{\dagger} A`` is used to compute `U` and then a `qr` of
   ``A^{\dagger} U`` is used to compute `V`. This is performed
   recursively to compute small singular values.

Returning `nothing`. For an output `F = svd(A, ...)` you can check if
`isnothing(F)` in your code and try a different algorithm.

To suppress this message in the future, you can wrap the `svd` call in the
`@suppress` macro from the `Suppressor` package.

